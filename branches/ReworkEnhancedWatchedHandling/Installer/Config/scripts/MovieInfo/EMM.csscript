//css_reference "core.dll";
//css_reference "Databases.dll";
//css_reference "utils.dll";

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Net;
using System.Collections;
using System.Web;
using System.Xml;
using System.Text.RegularExpressions;
using MediaPortal.Util;

class Grabber : MediaPortal.Video.Database.IIMDBScriptGrabber
{
  public Grabber()
  {
  }
  
  void MediaPortal.Video.Database.IIMDBScriptGrabber.FindFilm(string strSearch, int iLimit, ArrayList elements)
  {
    //As movie name will be taken from nfo we will just pass back search string
    MediaPortal.Video.Database.IMDB.IMDBUrl url = new MediaPortal.Video.Database.IMDB.IMDBUrl("", strSearch , "EMM");
    elements.Add(url);
	
    return;
  }

  //Movie details
  bool MediaPortal.Video.Database.IIMDBScriptGrabber.GetDetails(MediaPortal.Video.Database.IMDB.IMDBUrl url, ref MediaPortal.Video.Database.IMDBMovie movieDetails)
  {
	try
    {
      movieDetails.Reset();
      movieDetails.Database = "EMM";
      //Read nfo file 
	  string movie_Path = movieDetails.Path;
      string movie_FileName = movieDetails.File;
      string movie_FileTitle = Path.GetFileNameWithoutExtension(movie_Path + @"\" + movie_FileName);
      string movie_nfo = movie_Path + @"\" + movie_FileTitle + ".nfo";
	  
	  //No nfo file, no movie, movieDetails.ID = -1 is to tell MP to skip file, otherwise it will go to the DB with empty details
      if (!File.Exists(movie_nfo))
	  {
		movieDetails.ID = -1;
		return false;
	  }	
	             
      StreamReader streamReader = new StreamReader(movie_nfo);
      string nfo = streamReader.ReadToEnd();
      streamReader.Close();
	  streamReader.Dispose();
      
	  //IMDB number
	  string IMDBnumber = Regex.Match(nfo, "<id>(?<imdbid>.*?)</id>").Groups["imdbid"].Value;
      movieDetails.IMDBNumber = IMDBnumber;
	  
	  //Movie title
      string Title = Regex.Match(nfo, "<title>(?<title>.*?)</title>").Groups["title"].Value;
      movieDetails.Title = Title;
	  
	  //Director
      string DirectedBy = Regex.Match(nfo, "<director>(?<director>.*?)</director>").Groups["director"].Value;
      movieDetails.Director = DirectedBy;
	  
	  //Writer
      string writer = Regex.Match(nfo, "<credits>(?<credits>.*?)</credits>").Groups["credits"].Value;
      movieDetails.WritingCredits = writer.Replace("/ See more","");
	  
	  //Genre
      string genre = Regex.Match(nfo, "<genre>(?<genre>.*?)</genre>").Groups["genre"].Value;
      movieDetails.Genre = genre;
	  
	  //Tagline
      string tagLine = Regex.Match(nfo, "<tagline>(?<tagline>.*?)</tagline>").Groups["tagline"].Value;
      movieDetails.TagLine = tagLine;
	  
	  //Plot
      string plot = Regex.Match(nfo, "<outline>(?<plotoutline>.*?)</outline>").Groups["plotoutline"].Value;
      movieDetails.Plot = plot;
	  
	  //Summary (short plot)
      string plotSummary = Regex.Match(nfo, "<plot>(?<plot>.*?)</plot>").Groups["plot"].Value;
      movieDetails.PlotOutline = plotSummary;
	  
	  //MPAA certificate
      string mpaRating = Regex.Match(nfo, "<mpaa>(?<mpa>.*?)</mpaa>").Groups["mpa"].Value;
      movieDetails.MPARating = mpaRating;
	  
	  //Movie Rating
      string rating = Regex.Match(nfo, "<rating>(?<rating>.*?)</rating>").Groups["rating"].Value;
      rating = rating.Replace('.', ',');
      try
      {
        movieDetails.Rating = (float)System.Double.Parse(rating);
        if (movieDetails.Rating > 10.0f)
          movieDetails.Rating /= 10.0f;
	  //Movie Year
        string year = Regex.Match(nfo,"<year>(?<year>.*?)</year>").Groups["year"].Value;
        movieDetails.Year = System.Int32.Parse(year);
      }
      catch (Exception)
      {
      }
	  
	  //Votes
      string votes = Regex.Match(nfo,"<votes>(?<votes>.*?)</votes>").Groups["votes"].Value;
      votes=votes.Replace(",","");
      movieDetails.Votes=votes;
	  
	  //Top 250
	  try
      {
        string top250 = Regex.Match(nfo, "<top250>(?<top250>.*?)</top250").Groups["top250"].Value;
        movieDetails.Top250 = System.Int32.Parse(top250);
      }
      catch (Exception)
      {
      }
	  
	  //Runtime
      try
      {
      string runtime = Regex.Match(nfo,@"<runtime>(?<runtime>\d+).*?</runtime>").Groups["runtime"].Value;
      movieDetails.RunTime= System.Int32.Parse(runtime);
      }
      catch (Exception)
      {
      }
	  
	  //Actor list and roles
      MatchCollection actors = Regex.Matches(nfo,"<actor>.*?<name>(?<actor>.*?)</name>.*?<role>(?<role>.*?)</role>.*?</actor>",RegexOptions.Singleline);

      string strActor = string.Empty;
      string strRole = string.Empty;

      foreach (Match actor in actors)
      {
          strActor = string.Empty;
          strActor = actor.Groups["actor"].Value;
          
          strRole = string.Empty;
          strRole = actor.Groups["role"].Value;
          
          movieDetails.Cast += strActor;
          if (strRole != string.Empty)
            movieDetails.Cast += " as " + strRole;

          movieDetails.Cast += "\n";
      }
	  	  
	  //Poster cover (cover is named in this case as folder.jpg)
	  string movie_cover = movie_Path + @"\folder.jpg";
	  if (File.Exists(movie_cover))
	  {
		movieDetails.ThumbURL = "file://" + movie_cover;
	  }
	  
      return true;
    }
    catch (Exception ex)
    {
      //MediaPortal.GUI.Library.Log.Error("exception for imdb lookup of {0} err:{1} stack:{2}", url.URL, ex.Message, ex.StackTrace);
      //MessageBox.Show("ERROR");
	}
	movieDetails.ID = -1;
    return false;
  }

  string MediaPortal.Video.Database.IIMDBScriptGrabber.GetName()
  {
    return "EMM";
  }

  string MediaPortal.Video.Database.IIMDBScriptGrabber.GetLanguage()
  {
    return "EN";
  }

}

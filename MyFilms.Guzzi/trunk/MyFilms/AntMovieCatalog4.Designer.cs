//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.3625
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MyFilmsPlugin {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NewDataSet : global::System.Data.DataSet {
        
        private WatchedDataTable tableWatched;
        
        private AntMovieCatalogDataTable tableAntMovieCatalog;
        
        private CatalogDataTable tableCatalog;
        
        private PropertiesDataTable tableProperties;
        
        private CustomFieldsPropertiesDataTable tableCustomFieldsProperties;
        
        private CustomFieldDataTable tableCustomField;
        
        private ListItemDataTable tableListItem;
        
        private ContentsDataTable tableContents;
        
        private MovieDataTable tableMovie;
        
        private CustomFieldsDataTable tableCustomFields;
        
        private PersonsDataTable tablePersons;
        
        private PersonDataTable tablePerson;
        
        private MyFilmsSettingsDataTable tableMyFilmsSettings;
        
        private UsersDataTable tableUsers;
        
        private UserDataTable tableUser;
        
        private HistoryDataTable tableHistory;
        
        private global::System.Data.DataRelation relationWatched_Watched;
        
        private global::System.Data.DataRelation relationHistory_Watched;
        
        private global::System.Data.DataRelation relationAntMovieCatalog_Catalog;
        
        private global::System.Data.DataRelation relationCatalog_Properties;
        
        private global::System.Data.DataRelation relationCatalog_CustomFieldsProperties;
        
        private global::System.Data.DataRelation relationCustomFieldsProperties_CustomField;
        
        private global::System.Data.DataRelation relationCustomField_ListItem;
        
        private global::System.Data.DataRelation relationCatalog_Contents;
        
        private global::System.Data.DataRelation relationContents_Movie;
        
        private global::System.Data.DataRelation relationMovie_CustomFields;
        
        private global::System.Data.DataRelation relationAntMovieCatalog_Persons;
        
        private global::System.Data.DataRelation relationPersons_Person;
        
        private global::System.Data.DataRelation relationAntMovieCatalog_MyFilmsSettings;
        
        private global::System.Data.DataRelation relationMyFilmsSettings_Users;
        
        private global::System.Data.DataRelation relationUsers_User;
        
        private global::System.Data.DataRelation relationAntMovieCatalog_History;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Watched"] != null)) {
                    base.Tables.Add(new WatchedDataTable(ds.Tables["Watched"]));
                }
                if ((ds.Tables["AntMovieCatalog"] != null)) {
                    base.Tables.Add(new AntMovieCatalogDataTable(ds.Tables["AntMovieCatalog"]));
                }
                if ((ds.Tables["Catalog"] != null)) {
                    base.Tables.Add(new CatalogDataTable(ds.Tables["Catalog"]));
                }
                if ((ds.Tables["Properties"] != null)) {
                    base.Tables.Add(new PropertiesDataTable(ds.Tables["Properties"]));
                }
                if ((ds.Tables["CustomFieldsProperties"] != null)) {
                    base.Tables.Add(new CustomFieldsPropertiesDataTable(ds.Tables["CustomFieldsProperties"]));
                }
                if ((ds.Tables["CustomField"] != null)) {
                    base.Tables.Add(new CustomFieldDataTable(ds.Tables["CustomField"]));
                }
                if ((ds.Tables["ListItem"] != null)) {
                    base.Tables.Add(new ListItemDataTable(ds.Tables["ListItem"]));
                }
                if ((ds.Tables["Contents"] != null)) {
                    base.Tables.Add(new ContentsDataTable(ds.Tables["Contents"]));
                }
                if ((ds.Tables["Movie"] != null)) {
                    base.Tables.Add(new MovieDataTable(ds.Tables["Movie"]));
                }
                if ((ds.Tables["CustomFields"] != null)) {
                    base.Tables.Add(new CustomFieldsDataTable(ds.Tables["CustomFields"]));
                }
                if ((ds.Tables["Persons"] != null)) {
                    base.Tables.Add(new PersonsDataTable(ds.Tables["Persons"]));
                }
                if ((ds.Tables["Person"] != null)) {
                    base.Tables.Add(new PersonDataTable(ds.Tables["Person"]));
                }
                if ((ds.Tables["MyFilmsSettings"] != null)) {
                    base.Tables.Add(new MyFilmsSettingsDataTable(ds.Tables["MyFilmsSettings"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["History"] != null)) {
                    base.Tables.Add(new HistoryDataTable(ds.Tables["History"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WatchedDataTable Watched {
            get {
                return this.tableWatched;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AntMovieCatalogDataTable AntMovieCatalog {
            get {
                return this.tableAntMovieCatalog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CatalogDataTable Catalog {
            get {
                return this.tableCatalog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PropertiesDataTable Properties {
            get {
                return this.tableProperties;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomFieldsPropertiesDataTable CustomFieldsProperties {
            get {
                return this.tableCustomFieldsProperties;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomFieldDataTable CustomField {
            get {
                return this.tableCustomField;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListItemDataTable ListItem {
            get {
                return this.tableListItem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ContentsDataTable Contents {
            get {
                return this.tableContents;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MovieDataTable Movie {
            get {
                return this.tableMovie;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomFieldsDataTable CustomFields {
            get {
                return this.tableCustomFields;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PersonsDataTable Persons {
            get {
                return this.tablePersons;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PersonDataTable Person {
            get {
                return this.tablePerson;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MyFilmsSettingsDataTable MyFilmsSettings {
            get {
                return this.tableMyFilmsSettings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users {
            get {
                return this.tableUsers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserDataTable User {
            get {
                return this.tableUser;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HistoryDataTable History {
            get {
                return this.tableHistory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Watched"] != null)) {
                    base.Tables.Add(new WatchedDataTable(ds.Tables["Watched"]));
                }
                if ((ds.Tables["AntMovieCatalog"] != null)) {
                    base.Tables.Add(new AntMovieCatalogDataTable(ds.Tables["AntMovieCatalog"]));
                }
                if ((ds.Tables["Catalog"] != null)) {
                    base.Tables.Add(new CatalogDataTable(ds.Tables["Catalog"]));
                }
                if ((ds.Tables["Properties"] != null)) {
                    base.Tables.Add(new PropertiesDataTable(ds.Tables["Properties"]));
                }
                if ((ds.Tables["CustomFieldsProperties"] != null)) {
                    base.Tables.Add(new CustomFieldsPropertiesDataTable(ds.Tables["CustomFieldsProperties"]));
                }
                if ((ds.Tables["CustomField"] != null)) {
                    base.Tables.Add(new CustomFieldDataTable(ds.Tables["CustomField"]));
                }
                if ((ds.Tables["ListItem"] != null)) {
                    base.Tables.Add(new ListItemDataTable(ds.Tables["ListItem"]));
                }
                if ((ds.Tables["Contents"] != null)) {
                    base.Tables.Add(new ContentsDataTable(ds.Tables["Contents"]));
                }
                if ((ds.Tables["Movie"] != null)) {
                    base.Tables.Add(new MovieDataTable(ds.Tables["Movie"]));
                }
                if ((ds.Tables["CustomFields"] != null)) {
                    base.Tables.Add(new CustomFieldsDataTable(ds.Tables["CustomFields"]));
                }
                if ((ds.Tables["Persons"] != null)) {
                    base.Tables.Add(new PersonsDataTable(ds.Tables["Persons"]));
                }
                if ((ds.Tables["Person"] != null)) {
                    base.Tables.Add(new PersonDataTable(ds.Tables["Person"]));
                }
                if ((ds.Tables["MyFilmsSettings"] != null)) {
                    base.Tables.Add(new MyFilmsSettingsDataTable(ds.Tables["MyFilmsSettings"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["History"] != null)) {
                    base.Tables.Add(new HistoryDataTable(ds.Tables["History"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableWatched = ((WatchedDataTable)(base.Tables["Watched"]));
            if ((initTable == true)) {
                if ((this.tableWatched != null)) {
                    this.tableWatched.InitVars();
                }
            }
            this.tableAntMovieCatalog = ((AntMovieCatalogDataTable)(base.Tables["AntMovieCatalog"]));
            if ((initTable == true)) {
                if ((this.tableAntMovieCatalog != null)) {
                    this.tableAntMovieCatalog.InitVars();
                }
            }
            this.tableCatalog = ((CatalogDataTable)(base.Tables["Catalog"]));
            if ((initTable == true)) {
                if ((this.tableCatalog != null)) {
                    this.tableCatalog.InitVars();
                }
            }
            this.tableProperties = ((PropertiesDataTable)(base.Tables["Properties"]));
            if ((initTable == true)) {
                if ((this.tableProperties != null)) {
                    this.tableProperties.InitVars();
                }
            }
            this.tableCustomFieldsProperties = ((CustomFieldsPropertiesDataTable)(base.Tables["CustomFieldsProperties"]));
            if ((initTable == true)) {
                if ((this.tableCustomFieldsProperties != null)) {
                    this.tableCustomFieldsProperties.InitVars();
                }
            }
            this.tableCustomField = ((CustomFieldDataTable)(base.Tables["CustomField"]));
            if ((initTable == true)) {
                if ((this.tableCustomField != null)) {
                    this.tableCustomField.InitVars();
                }
            }
            this.tableListItem = ((ListItemDataTable)(base.Tables["ListItem"]));
            if ((initTable == true)) {
                if ((this.tableListItem != null)) {
                    this.tableListItem.InitVars();
                }
            }
            this.tableContents = ((ContentsDataTable)(base.Tables["Contents"]));
            if ((initTable == true)) {
                if ((this.tableContents != null)) {
                    this.tableContents.InitVars();
                }
            }
            this.tableMovie = ((MovieDataTable)(base.Tables["Movie"]));
            if ((initTable == true)) {
                if ((this.tableMovie != null)) {
                    this.tableMovie.InitVars();
                }
            }
            this.tableCustomFields = ((CustomFieldsDataTable)(base.Tables["CustomFields"]));
            if ((initTable == true)) {
                if ((this.tableCustomFields != null)) {
                    this.tableCustomFields.InitVars();
                }
            }
            this.tablePersons = ((PersonsDataTable)(base.Tables["Persons"]));
            if ((initTable == true)) {
                if ((this.tablePersons != null)) {
                    this.tablePersons.InitVars();
                }
            }
            this.tablePerson = ((PersonDataTable)(base.Tables["Person"]));
            if ((initTable == true)) {
                if ((this.tablePerson != null)) {
                    this.tablePerson.InitVars();
                }
            }
            this.tableMyFilmsSettings = ((MyFilmsSettingsDataTable)(base.Tables["MyFilmsSettings"]));
            if ((initTable == true)) {
                if ((this.tableMyFilmsSettings != null)) {
                    this.tableMyFilmsSettings.InitVars();
                }
            }
            this.tableUsers = ((UsersDataTable)(base.Tables["Users"]));
            if ((initTable == true)) {
                if ((this.tableUsers != null)) {
                    this.tableUsers.InitVars();
                }
            }
            this.tableUser = ((UserDataTable)(base.Tables["User"]));
            if ((initTable == true)) {
                if ((this.tableUser != null)) {
                    this.tableUser.InitVars();
                }
            }
            this.tableHistory = ((HistoryDataTable)(base.Tables["History"]));
            if ((initTable == true)) {
                if ((this.tableHistory != null)) {
                    this.tableHistory.InitVars();
                }
            }
            this.relationWatched_Watched = this.Relations["Watched_Watched"];
            this.relationHistory_Watched = this.Relations["History_Watched"];
            this.relationAntMovieCatalog_Catalog = this.Relations["AntMovieCatalog_Catalog"];
            this.relationCatalog_Properties = this.Relations["Catalog_Properties"];
            this.relationCatalog_CustomFieldsProperties = this.Relations["Catalog_CustomFieldsProperties"];
            this.relationCustomFieldsProperties_CustomField = this.Relations["CustomFieldsProperties_CustomField"];
            this.relationCustomField_ListItem = this.Relations["CustomField_ListItem"];
            this.relationCatalog_Contents = this.Relations["Catalog_Contents"];
            this.relationContents_Movie = this.Relations["Contents_Movie"];
            this.relationMovie_CustomFields = this.Relations["Movie_CustomFields"];
            this.relationAntMovieCatalog_Persons = this.Relations["AntMovieCatalog_Persons"];
            this.relationPersons_Person = this.Relations["Persons_Person"];
            this.relationAntMovieCatalog_MyFilmsSettings = this.Relations["AntMovieCatalog_MyFilmsSettings"];
            this.relationMyFilmsSettings_Users = this.Relations["MyFilmsSettings_Users"];
            this.relationUsers_User = this.Relations["Users_User"];
            this.relationAntMovieCatalog_History = this.Relations["AntMovieCatalog_History"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableWatched = new WatchedDataTable();
            base.Tables.Add(this.tableWatched);
            this.tableAntMovieCatalog = new AntMovieCatalogDataTable();
            base.Tables.Add(this.tableAntMovieCatalog);
            this.tableCatalog = new CatalogDataTable();
            base.Tables.Add(this.tableCatalog);
            this.tableProperties = new PropertiesDataTable();
            base.Tables.Add(this.tableProperties);
            this.tableCustomFieldsProperties = new CustomFieldsPropertiesDataTable();
            base.Tables.Add(this.tableCustomFieldsProperties);
            this.tableCustomField = new CustomFieldDataTable();
            base.Tables.Add(this.tableCustomField);
            this.tableListItem = new ListItemDataTable();
            base.Tables.Add(this.tableListItem);
            this.tableContents = new ContentsDataTable();
            base.Tables.Add(this.tableContents);
            this.tableMovie = new MovieDataTable();
            base.Tables.Add(this.tableMovie);
            this.tableCustomFields = new CustomFieldsDataTable();
            base.Tables.Add(this.tableCustomFields);
            this.tablePersons = new PersonsDataTable();
            base.Tables.Add(this.tablePersons);
            this.tablePerson = new PersonDataTable();
            base.Tables.Add(this.tablePerson);
            this.tableMyFilmsSettings = new MyFilmsSettingsDataTable();
            base.Tables.Add(this.tableMyFilmsSettings);
            this.tableUsers = new UsersDataTable();
            base.Tables.Add(this.tableUsers);
            this.tableUser = new UserDataTable();
            base.Tables.Add(this.tableUser);
            this.tableHistory = new HistoryDataTable();
            base.Tables.Add(this.tableHistory);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("Watched_Watched", new global::System.Data.DataColumn[] {
                        this.tableWatched.Watched_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableWatched.Watched_Id_0Column});
            this.tableWatched.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("History_Watched", new global::System.Data.DataColumn[] {
                        this.tableHistory.History_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableWatched.History_IdColumn});
            this.tableWatched.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("AntMovieCatalog_Catalog", new global::System.Data.DataColumn[] {
                        this.tableAntMovieCatalog.AntMovieCatalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCatalog.AntMovieCatalog_IdColumn});
            this.tableCatalog.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Catalog_Properties", new global::System.Data.DataColumn[] {
                        this.tableCatalog.Catalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableProperties.Catalog_IdColumn});
            this.tableProperties.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Catalog_CustomFieldsProperties", new global::System.Data.DataColumn[] {
                        this.tableCatalog.Catalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCustomFieldsProperties.Catalog_IdColumn});
            this.tableCustomFieldsProperties.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CustomFieldsProperties_CustomField", new global::System.Data.DataColumn[] {
                        this.tableCustomFieldsProperties.CustomFieldsProperties_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCustomField.CustomFieldsProperties_IdColumn});
            this.tableCustomField.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CustomField_ListItem", new global::System.Data.DataColumn[] {
                        this.tableCustomField.CustomField_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableListItem.CustomField_IdColumn});
            this.tableListItem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Catalog_Contents", new global::System.Data.DataColumn[] {
                        this.tableCatalog.Catalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableContents.Catalog_IdColumn});
            this.tableContents.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Contents_Movie", new global::System.Data.DataColumn[] {
                        this.tableContents.Contents_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMovie.Contents_IdColumn});
            this.tableMovie.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Movie_CustomFields", new global::System.Data.DataColumn[] {
                        this.tableMovie.Movie_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCustomFields.Movie_IdColumn});
            this.tableCustomFields.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("AntMovieCatalog_Persons", new global::System.Data.DataColumn[] {
                        this.tableAntMovieCatalog.AntMovieCatalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablePersons.AntMovieCatalog_IdColumn});
            this.tablePersons.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Persons_Person", new global::System.Data.DataColumn[] {
                        this.tablePersons.Persons_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablePerson.Persons_IdColumn});
            this.tablePerson.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("AntMovieCatalog_MyFilmsSettings", new global::System.Data.DataColumn[] {
                        this.tableAntMovieCatalog.AntMovieCatalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMyFilmsSettings.AntMovieCatalog_IdColumn});
            this.tableMyFilmsSettings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("MyFilmsSettings_Users", new global::System.Data.DataColumn[] {
                        this.tableMyFilmsSettings.MyFilmsSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableUsers.MyFilmsSettings_IdColumn});
            this.tableUsers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Users_User", new global::System.Data.DataColumn[] {
                        this.tableUsers.Users_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableUser.Users_IdColumn});
            this.tableUser.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("AntMovieCatalog_History", new global::System.Data.DataColumn[] {
                        this.tableAntMovieCatalog.AntMovieCatalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableHistory.AntMovieCatalog_IdColumn});
            this.tableHistory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationWatched_Watched = new global::System.Data.DataRelation("Watched_Watched", new global::System.Data.DataColumn[] {
                        this.tableWatched.Watched_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableWatched.Watched_Id_0Column}, false);
            this.relationWatched_Watched.Nested = true;
            this.Relations.Add(this.relationWatched_Watched);
            this.relationHistory_Watched = new global::System.Data.DataRelation("History_Watched", new global::System.Data.DataColumn[] {
                        this.tableHistory.History_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableWatched.History_IdColumn}, false);
            this.relationHistory_Watched.Nested = true;
            this.Relations.Add(this.relationHistory_Watched);
            this.relationAntMovieCatalog_Catalog = new global::System.Data.DataRelation("AntMovieCatalog_Catalog", new global::System.Data.DataColumn[] {
                        this.tableAntMovieCatalog.AntMovieCatalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCatalog.AntMovieCatalog_IdColumn}, false);
            this.relationAntMovieCatalog_Catalog.Nested = true;
            this.Relations.Add(this.relationAntMovieCatalog_Catalog);
            this.relationCatalog_Properties = new global::System.Data.DataRelation("Catalog_Properties", new global::System.Data.DataColumn[] {
                        this.tableCatalog.Catalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableProperties.Catalog_IdColumn}, false);
            this.relationCatalog_Properties.Nested = true;
            this.Relations.Add(this.relationCatalog_Properties);
            this.relationCatalog_CustomFieldsProperties = new global::System.Data.DataRelation("Catalog_CustomFieldsProperties", new global::System.Data.DataColumn[] {
                        this.tableCatalog.Catalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCustomFieldsProperties.Catalog_IdColumn}, false);
            this.relationCatalog_CustomFieldsProperties.Nested = true;
            this.Relations.Add(this.relationCatalog_CustomFieldsProperties);
            this.relationCustomFieldsProperties_CustomField = new global::System.Data.DataRelation("CustomFieldsProperties_CustomField", new global::System.Data.DataColumn[] {
                        this.tableCustomFieldsProperties.CustomFieldsProperties_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCustomField.CustomFieldsProperties_IdColumn}, false);
            this.relationCustomFieldsProperties_CustomField.Nested = true;
            this.Relations.Add(this.relationCustomFieldsProperties_CustomField);
            this.relationCustomField_ListItem = new global::System.Data.DataRelation("CustomField_ListItem", new global::System.Data.DataColumn[] {
                        this.tableCustomField.CustomField_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableListItem.CustomField_IdColumn}, false);
            this.relationCustomField_ListItem.Nested = true;
            this.Relations.Add(this.relationCustomField_ListItem);
            this.relationCatalog_Contents = new global::System.Data.DataRelation("Catalog_Contents", new global::System.Data.DataColumn[] {
                        this.tableCatalog.Catalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableContents.Catalog_IdColumn}, false);
            this.relationCatalog_Contents.Nested = true;
            this.Relations.Add(this.relationCatalog_Contents);
            this.relationContents_Movie = new global::System.Data.DataRelation("Contents_Movie", new global::System.Data.DataColumn[] {
                        this.tableContents.Contents_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMovie.Contents_IdColumn}, false);
            this.relationContents_Movie.Nested = true;
            this.Relations.Add(this.relationContents_Movie);
            this.relationMovie_CustomFields = new global::System.Data.DataRelation("Movie_CustomFields", new global::System.Data.DataColumn[] {
                        this.tableMovie.Movie_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCustomFields.Movie_IdColumn}, false);
            this.relationMovie_CustomFields.Nested = true;
            this.Relations.Add(this.relationMovie_CustomFields);
            this.relationAntMovieCatalog_Persons = new global::System.Data.DataRelation("AntMovieCatalog_Persons", new global::System.Data.DataColumn[] {
                        this.tableAntMovieCatalog.AntMovieCatalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablePersons.AntMovieCatalog_IdColumn}, false);
            this.relationAntMovieCatalog_Persons.Nested = true;
            this.Relations.Add(this.relationAntMovieCatalog_Persons);
            this.relationPersons_Person = new global::System.Data.DataRelation("Persons_Person", new global::System.Data.DataColumn[] {
                        this.tablePersons.Persons_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablePerson.Persons_IdColumn}, false);
            this.relationPersons_Person.Nested = true;
            this.Relations.Add(this.relationPersons_Person);
            this.relationAntMovieCatalog_MyFilmsSettings = new global::System.Data.DataRelation("AntMovieCatalog_MyFilmsSettings", new global::System.Data.DataColumn[] {
                        this.tableAntMovieCatalog.AntMovieCatalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMyFilmsSettings.AntMovieCatalog_IdColumn}, false);
            this.relationAntMovieCatalog_MyFilmsSettings.Nested = true;
            this.Relations.Add(this.relationAntMovieCatalog_MyFilmsSettings);
            this.relationMyFilmsSettings_Users = new global::System.Data.DataRelation("MyFilmsSettings_Users", new global::System.Data.DataColumn[] {
                        this.tableMyFilmsSettings.MyFilmsSettings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableUsers.MyFilmsSettings_IdColumn}, false);
            this.relationMyFilmsSettings_Users.Nested = true;
            this.Relations.Add(this.relationMyFilmsSettings_Users);
            this.relationUsers_User = new global::System.Data.DataRelation("Users_User", new global::System.Data.DataColumn[] {
                        this.tableUsers.Users_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableUser.Users_IdColumn}, false);
            this.relationUsers_User.Nested = true;
            this.Relations.Add(this.relationUsers_User);
            this.relationAntMovieCatalog_History = new global::System.Data.DataRelation("AntMovieCatalog_History", new global::System.Data.DataColumn[] {
                        this.tableAntMovieCatalog.AntMovieCatalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableHistory.AntMovieCatalog_IdColumn}, false);
            this.relationAntMovieCatalog_History.Nested = true;
            this.Relations.Add(this.relationAntMovieCatalog_History);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWatched() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAntMovieCatalog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCatalog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProperties() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomFieldsProperties() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomField() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListItem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeContents() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMovie() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomFields() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePersons() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePerson() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMyFilmsSettings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUser() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHistory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void WatchedRowChangeEventHandler(object sender, WatchedRowChangeEvent e);
        
        public delegate void AntMovieCatalogRowChangeEventHandler(object sender, AntMovieCatalogRowChangeEvent e);
        
        public delegate void CatalogRowChangeEventHandler(object sender, CatalogRowChangeEvent e);
        
        public delegate void PropertiesRowChangeEventHandler(object sender, PropertiesRowChangeEvent e);
        
        public delegate void CustomFieldsPropertiesRowChangeEventHandler(object sender, CustomFieldsPropertiesRowChangeEvent e);
        
        public delegate void CustomFieldRowChangeEventHandler(object sender, CustomFieldRowChangeEvent e);
        
        public delegate void ListItemRowChangeEventHandler(object sender, ListItemRowChangeEvent e);
        
        public delegate void ContentsRowChangeEventHandler(object sender, ContentsRowChangeEvent e);
        
        public delegate void MovieRowChangeEventHandler(object sender, MovieRowChangeEvent e);
        
        public delegate void CustomFieldsRowChangeEventHandler(object sender, CustomFieldsRowChangeEvent e);
        
        public delegate void PersonsRowChangeEventHandler(object sender, PersonsRowChangeEvent e);
        
        public delegate void PersonRowChangeEventHandler(object sender, PersonRowChangeEvent e);
        
        public delegate void MyFilmsSettingsRowChangeEventHandler(object sender, MyFilmsSettingsRowChangeEvent e);
        
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
        
        public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
        
        public delegate void HistoryRowChangeEventHandler(object sender, HistoryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WatchedDataTable : global::System.Data.TypedTableBase<WatchedRow> {
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnUser;
            
            private global::System.Data.DataColumn columnConfig;
            
            private global::System.Data.DataColumn columnMovieNumber;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnWatched_Id;
            
            private global::System.Data.DataColumn columnWatched_Id_0;
            
            private global::System.Data.DataColumn columnHistory_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchedDataTable() {
                this.TableName = "Watched";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WatchedDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WatchedDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserColumn {
                get {
                    return this.columnUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfigColumn {
                get {
                    return this.columnConfig;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MovieNumberColumn {
                get {
                    return this.columnMovieNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Watched_IdColumn {
                get {
                    return this.columnWatched_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Watched_Id_0Column {
                get {
                    return this.columnWatched_Id_0;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn History_IdColumn {
                get {
                    return this.columnHistory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchedRow this[int index] {
                get {
                    return ((WatchedRow)(this.Rows[index]));
                }
            }
            
            public event WatchedRowChangeEventHandler WatchedRowChanging;
            
            public event WatchedRowChangeEventHandler WatchedRowChanged;
            
            public event WatchedRowChangeEventHandler WatchedRowDeleting;
            
            public event WatchedRowChangeEventHandler WatchedRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWatchedRow(WatchedRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchedRow AddWatchedRow(string Number, System.DateTime Date, string User, string Config, string MovieNumber, string Title, WatchedRow parentWatchedRowByWatched_Watched, HistoryRow parentHistoryRowByHistory_Watched) {
                WatchedRow rowWatchedRow = ((WatchedRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Number,
                        Date,
                        User,
                        Config,
                        MovieNumber,
                        Title,
                        null,
                        null,
                        null};
                if ((parentWatchedRowByWatched_Watched != null)) {
                    columnValuesArray[7] = parentWatchedRowByWatched_Watched[6];
                }
                if ((parentHistoryRowByHistory_Watched != null)) {
                    columnValuesArray[8] = parentHistoryRowByHistory_Watched[0];
                }
                rowWatchedRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWatchedRow);
                return rowWatchedRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WatchedDataTable cln = ((WatchedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WatchedDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumber = base.Columns["Number"];
                this.columnDate = base.Columns["Date"];
                this.columnUser = base.Columns["User"];
                this.columnConfig = base.Columns["Config"];
                this.columnMovieNumber = base.Columns["MovieNumber"];
                this.columnTitle = base.Columns["Title"];
                this.columnWatched_Id = base.Columns["Watched_Id"];
                this.columnWatched_Id_0 = base.Columns["Watched_Id_0"];
                this.columnHistory_Id = base.Columns["History_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumber);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDate);
                this.columnUser = new global::System.Data.DataColumn("User", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUser);
                this.columnConfig = new global::System.Data.DataColumn("Config", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnConfig);
                this.columnMovieNumber = new global::System.Data.DataColumn("MovieNumber", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMovieNumber);
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTitle);
                this.columnWatched_Id = new global::System.Data.DataColumn("Watched_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnWatched_Id);
                this.columnWatched_Id_0 = new global::System.Data.DataColumn("Watched_Id_0", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnWatched_Id_0);
                this.columnHistory_Id = new global::System.Data.DataColumn("History_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnHistory_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWatched_Id}, true));
                this.columnNumber.Namespace = "";
                this.columnDate.Namespace = "";
                this.columnUser.Namespace = "";
                this.columnConfig.Namespace = "";
                this.columnMovieNumber.Namespace = "";
                this.columnTitle.Namespace = "";
                this.columnWatched_Id.AutoIncrement = true;
                this.columnWatched_Id.AllowDBNull = false;
                this.columnWatched_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchedRow NewWatchedRow() {
                return ((WatchedRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WatchedRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WatchedRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WatchedRowChanged != null)) {
                    this.WatchedRowChanged(this, new WatchedRowChangeEvent(((WatchedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WatchedRowChanging != null)) {
                    this.WatchedRowChanging(this, new WatchedRowChangeEvent(((WatchedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WatchedRowDeleted != null)) {
                    this.WatchedRowDeleted(this, new WatchedRowChangeEvent(((WatchedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WatchedRowDeleting != null)) {
                    this.WatchedRowDeleting(this, new WatchedRowChangeEvent(((WatchedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWatchedRow(WatchedRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WatchedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AntMovieCatalogDataTable : global::System.Data.TypedTableBase<AntMovieCatalogRow> {
            
            private global::System.Data.DataColumn columnFormat;
            
            private global::System.Data.DataColumn columnVersion;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnAntMovieCatalog_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AntMovieCatalogDataTable() {
                this.TableName = "AntMovieCatalog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AntMovieCatalogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AntMovieCatalogDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormatColumn {
                get {
                    return this.columnFormat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AntMovieCatalog_IdColumn {
                get {
                    return this.columnAntMovieCatalog_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AntMovieCatalogRow this[int index] {
                get {
                    return ((AntMovieCatalogRow)(this.Rows[index]));
                }
            }
            
            public event AntMovieCatalogRowChangeEventHandler AntMovieCatalogRowChanging;
            
            public event AntMovieCatalogRowChangeEventHandler AntMovieCatalogRowChanged;
            
            public event AntMovieCatalogRowChangeEventHandler AntMovieCatalogRowDeleting;
            
            public event AntMovieCatalogRowChangeEventHandler AntMovieCatalogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAntMovieCatalogRow(AntMovieCatalogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AntMovieCatalogRow AddAntMovieCatalogRow(string Format, string Version, System.DateTime Date) {
                AntMovieCatalogRow rowAntMovieCatalogRow = ((AntMovieCatalogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Format,
                        Version,
                        Date,
                        null};
                rowAntMovieCatalogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAntMovieCatalogRow);
                return rowAntMovieCatalogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AntMovieCatalogDataTable cln = ((AntMovieCatalogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AntMovieCatalogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFormat = base.Columns["Format"];
                this.columnVersion = base.Columns["Version"];
                this.columnDate = base.Columns["Date"];
                this.columnAntMovieCatalog_Id = base.Columns["AntMovieCatalog_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFormat = new global::System.Data.DataColumn("Format", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFormat);
                this.columnVersion = new global::System.Data.DataColumn("Version", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVersion);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDate);
                this.columnAntMovieCatalog_Id = new global::System.Data.DataColumn("AntMovieCatalog_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAntMovieCatalog_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAntMovieCatalog_Id}, true));
                this.columnFormat.Namespace = "";
                this.columnVersion.Namespace = "";
                this.columnDate.Namespace = "";
                this.columnAntMovieCatalog_Id.AutoIncrement = true;
                this.columnAntMovieCatalog_Id.AllowDBNull = false;
                this.columnAntMovieCatalog_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AntMovieCatalogRow NewAntMovieCatalogRow() {
                return ((AntMovieCatalogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AntMovieCatalogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AntMovieCatalogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AntMovieCatalogRowChanged != null)) {
                    this.AntMovieCatalogRowChanged(this, new AntMovieCatalogRowChangeEvent(((AntMovieCatalogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AntMovieCatalogRowChanging != null)) {
                    this.AntMovieCatalogRowChanging(this, new AntMovieCatalogRowChangeEvent(((AntMovieCatalogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AntMovieCatalogRowDeleted != null)) {
                    this.AntMovieCatalogRowDeleted(this, new AntMovieCatalogRowChangeEvent(((AntMovieCatalogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AntMovieCatalogRowDeleting != null)) {
                    this.AntMovieCatalogRowDeleting(this, new AntMovieCatalogRowChangeEvent(((AntMovieCatalogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAntMovieCatalogRow(AntMovieCatalogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AntMovieCatalogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CatalogDataTable : global::System.Data.TypedTableBase<CatalogRow> {
            
            private global::System.Data.DataColumn columnCatalog_Id;
            
            private global::System.Data.DataColumn columnAntMovieCatalog_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogDataTable() {
                this.TableName = "Catalog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CatalogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CatalogDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Catalog_IdColumn {
                get {
                    return this.columnCatalog_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AntMovieCatalog_IdColumn {
                get {
                    return this.columnAntMovieCatalog_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRow this[int index] {
                get {
                    return ((CatalogRow)(this.Rows[index]));
                }
            }
            
            public event CatalogRowChangeEventHandler CatalogRowChanging;
            
            public event CatalogRowChangeEventHandler CatalogRowChanged;
            
            public event CatalogRowChangeEventHandler CatalogRowDeleting;
            
            public event CatalogRowChangeEventHandler CatalogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCatalogRow(CatalogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRow AddCatalogRow(AntMovieCatalogRow parentAntMovieCatalogRowByAntMovieCatalog_Catalog) {
                CatalogRow rowCatalogRow = ((CatalogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentAntMovieCatalogRowByAntMovieCatalog_Catalog != null)) {
                    columnValuesArray[1] = parentAntMovieCatalogRowByAntMovieCatalog_Catalog[3];
                }
                rowCatalogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCatalogRow);
                return rowCatalogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CatalogDataTable cln = ((CatalogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CatalogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCatalog_Id = base.Columns["Catalog_Id"];
                this.columnAntMovieCatalog_Id = base.Columns["AntMovieCatalog_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCatalog_Id = new global::System.Data.DataColumn("Catalog_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCatalog_Id);
                this.columnAntMovieCatalog_Id = new global::System.Data.DataColumn("AntMovieCatalog_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAntMovieCatalog_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCatalog_Id}, true));
                this.columnCatalog_Id.AutoIncrement = true;
                this.columnCatalog_Id.AllowDBNull = false;
                this.columnCatalog_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRow NewCatalogRow() {
                return ((CatalogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CatalogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CatalogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CatalogRowChanged != null)) {
                    this.CatalogRowChanged(this, new CatalogRowChangeEvent(((CatalogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CatalogRowChanging != null)) {
                    this.CatalogRowChanging(this, new CatalogRowChangeEvent(((CatalogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CatalogRowDeleted != null)) {
                    this.CatalogRowDeleted(this, new CatalogRowChangeEvent(((CatalogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CatalogRowDeleting != null)) {
                    this.CatalogRowDeleting(this, new CatalogRowChangeEvent(((CatalogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCatalogRow(CatalogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CatalogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PropertiesDataTable : global::System.Data.TypedTableBase<PropertiesRow> {
            
            private global::System.Data.DataColumn columnOwner;
            
            private global::System.Data.DataColumn columnMail;
            
            private global::System.Data.DataColumn columnSite;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnCatalog_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertiesDataTable() {
                this.TableName = "Properties";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PropertiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PropertiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerColumn {
                get {
                    return this.columnOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MailColumn {
                get {
                    return this.columnMail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteColumn {
                get {
                    return this.columnSite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Catalog_IdColumn {
                get {
                    return this.columnCatalog_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertiesRow this[int index] {
                get {
                    return ((PropertiesRow)(this.Rows[index]));
                }
            }
            
            public event PropertiesRowChangeEventHandler PropertiesRowChanging;
            
            public event PropertiesRowChangeEventHandler PropertiesRowChanged;
            
            public event PropertiesRowChangeEventHandler PropertiesRowDeleting;
            
            public event PropertiesRowChangeEventHandler PropertiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPropertiesRow(PropertiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertiesRow AddPropertiesRow(string Owner, string Mail, string Site, string Description, CatalogRow parentCatalogRowByCatalog_Properties) {
                PropertiesRow rowPropertiesRow = ((PropertiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Owner,
                        Mail,
                        Site,
                        Description,
                        null};
                if ((parentCatalogRowByCatalog_Properties != null)) {
                    columnValuesArray[4] = parentCatalogRowByCatalog_Properties[0];
                }
                rowPropertiesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPropertiesRow);
                return rowPropertiesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PropertiesDataTable cln = ((PropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PropertiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOwner = base.Columns["Owner"];
                this.columnMail = base.Columns["Mail"];
                this.columnSite = base.Columns["Site"];
                this.columnDescription = base.Columns["Description"];
                this.columnCatalog_Id = base.Columns["Catalog_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOwner = new global::System.Data.DataColumn("Owner", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOwner);
                this.columnMail = new global::System.Data.DataColumn("Mail", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMail);
                this.columnSite = new global::System.Data.DataColumn("Site", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSite);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDescription);
                this.columnCatalog_Id = new global::System.Data.DataColumn("Catalog_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCatalog_Id);
                this.columnOwner.Namespace = "";
                this.columnMail.Namespace = "";
                this.columnSite.Namespace = "";
                this.columnDescription.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertiesRow NewPropertiesRow() {
                return ((PropertiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PropertiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PropertiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PropertiesRowChanged != null)) {
                    this.PropertiesRowChanged(this, new PropertiesRowChangeEvent(((PropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PropertiesRowChanging != null)) {
                    this.PropertiesRowChanging(this, new PropertiesRowChangeEvent(((PropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PropertiesRowDeleted != null)) {
                    this.PropertiesRowDeleted(this, new PropertiesRowChangeEvent(((PropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PropertiesRowDeleting != null)) {
                    this.PropertiesRowDeleting(this, new PropertiesRowChangeEvent(((PropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePropertiesRow(PropertiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PropertiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomFieldsPropertiesDataTable : global::System.Data.TypedTableBase<CustomFieldsPropertiesRow> {
            
            private global::System.Data.DataColumn columnColumnSettings;
            
            private global::System.Data.DataColumn columnGUIProperties;
            
            private global::System.Data.DataColumn columnOtherProperties;
            
            private global::System.Data.DataColumn columnCustomFieldsProperties_Id;
            
            private global::System.Data.DataColumn columnCatalog_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsPropertiesDataTable() {
                this.TableName = "CustomFieldsProperties";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomFieldsPropertiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomFieldsPropertiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColumnSettingsColumn {
                get {
                    return this.columnColumnSettings;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GUIPropertiesColumn {
                get {
                    return this.columnGUIProperties;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherPropertiesColumn {
                get {
                    return this.columnOtherProperties;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomFieldsProperties_IdColumn {
                get {
                    return this.columnCustomFieldsProperties_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Catalog_IdColumn {
                get {
                    return this.columnCatalog_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsPropertiesRow this[int index] {
                get {
                    return ((CustomFieldsPropertiesRow)(this.Rows[index]));
                }
            }
            
            public event CustomFieldsPropertiesRowChangeEventHandler CustomFieldsPropertiesRowChanging;
            
            public event CustomFieldsPropertiesRowChangeEventHandler CustomFieldsPropertiesRowChanged;
            
            public event CustomFieldsPropertiesRowChangeEventHandler CustomFieldsPropertiesRowDeleting;
            
            public event CustomFieldsPropertiesRowChangeEventHandler CustomFieldsPropertiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomFieldsPropertiesRow(CustomFieldsPropertiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsPropertiesRow AddCustomFieldsPropertiesRow(string ColumnSettings, string GUIProperties, string OtherProperties, CatalogRow parentCatalogRowByCatalog_CustomFieldsProperties) {
                CustomFieldsPropertiesRow rowCustomFieldsPropertiesRow = ((CustomFieldsPropertiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ColumnSettings,
                        GUIProperties,
                        OtherProperties,
                        null,
                        null};
                if ((parentCatalogRowByCatalog_CustomFieldsProperties != null)) {
                    columnValuesArray[4] = parentCatalogRowByCatalog_CustomFieldsProperties[0];
                }
                rowCustomFieldsPropertiesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustomFieldsPropertiesRow);
                return rowCustomFieldsPropertiesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustomFieldsPropertiesDataTable cln = ((CustomFieldsPropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustomFieldsPropertiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnColumnSettings = base.Columns["ColumnSettings"];
                this.columnGUIProperties = base.Columns["GUIProperties"];
                this.columnOtherProperties = base.Columns["OtherProperties"];
                this.columnCustomFieldsProperties_Id = base.Columns["CustomFieldsProperties_Id"];
                this.columnCatalog_Id = base.Columns["Catalog_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnColumnSettings = new global::System.Data.DataColumn("ColumnSettings", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnColumnSettings);
                this.columnGUIProperties = new global::System.Data.DataColumn("GUIProperties", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnGUIProperties);
                this.columnOtherProperties = new global::System.Data.DataColumn("OtherProperties", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOtherProperties);
                this.columnCustomFieldsProperties_Id = new global::System.Data.DataColumn("CustomFieldsProperties_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCustomFieldsProperties_Id);
                this.columnCatalog_Id = new global::System.Data.DataColumn("Catalog_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCatalog_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCustomFieldsProperties_Id}, true));
                this.columnColumnSettings.Namespace = "";
                this.columnGUIProperties.Namespace = "";
                this.columnOtherProperties.Namespace = "";
                this.columnCustomFieldsProperties_Id.AutoIncrement = true;
                this.columnCustomFieldsProperties_Id.AllowDBNull = false;
                this.columnCustomFieldsProperties_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsPropertiesRow NewCustomFieldsPropertiesRow() {
                return ((CustomFieldsPropertiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustomFieldsPropertiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustomFieldsPropertiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomFieldsPropertiesRowChanged != null)) {
                    this.CustomFieldsPropertiesRowChanged(this, new CustomFieldsPropertiesRowChangeEvent(((CustomFieldsPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomFieldsPropertiesRowChanging != null)) {
                    this.CustomFieldsPropertiesRowChanging(this, new CustomFieldsPropertiesRowChangeEvent(((CustomFieldsPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomFieldsPropertiesRowDeleted != null)) {
                    this.CustomFieldsPropertiesRowDeleted(this, new CustomFieldsPropertiesRowChangeEvent(((CustomFieldsPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomFieldsPropertiesRowDeleting != null)) {
                    this.CustomFieldsPropertiesRowDeleting(this, new CustomFieldsPropertiesRowChangeEvent(((CustomFieldsPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomFieldsPropertiesRow(CustomFieldsPropertiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomFieldsPropertiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomFieldDataTable : global::System.Data.TypedTableBase<CustomFieldRow> {
            
            private global::System.Data.DataColumn columnTag;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnDefaultValue;
            
            private global::System.Data.DataColumn columnMultiValues;
            
            private global::System.Data.DataColumn columnExcludedInScripts;
            
            private global::System.Data.DataColumn columnGUIProperties;
            
            private global::System.Data.DataColumn columnOtherProperties;
            
            private global::System.Data.DataColumn columnCustomField_Id;
            
            private global::System.Data.DataColumn columnCustomFieldsProperties_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldDataTable() {
                this.TableName = "CustomField";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomFieldDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomFieldDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TagColumn {
                get {
                    return this.columnTag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefaultValueColumn {
                get {
                    return this.columnDefaultValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MultiValuesColumn {
                get {
                    return this.columnMultiValues;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExcludedInScriptsColumn {
                get {
                    return this.columnExcludedInScripts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GUIPropertiesColumn {
                get {
                    return this.columnGUIProperties;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherPropertiesColumn {
                get {
                    return this.columnOtherProperties;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomField_IdColumn {
                get {
                    return this.columnCustomField_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomFieldsProperties_IdColumn {
                get {
                    return this.columnCustomFieldsProperties_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldRow this[int index] {
                get {
                    return ((CustomFieldRow)(this.Rows[index]));
                }
            }
            
            public event CustomFieldRowChangeEventHandler CustomFieldRowChanging;
            
            public event CustomFieldRowChangeEventHandler CustomFieldRowChanged;
            
            public event CustomFieldRowChangeEventHandler CustomFieldRowDeleting;
            
            public event CustomFieldRowChangeEventHandler CustomFieldRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomFieldRow(CustomFieldRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldRow AddCustomFieldRow(string Tag, string Name, string Type, string DefaultValue, string MultiValues, string ExcludedInScripts, string GUIProperties, string OtherProperties, CustomFieldsPropertiesRow parentCustomFieldsPropertiesRowByCustomFieldsProperties_CustomField) {
                CustomFieldRow rowCustomFieldRow = ((CustomFieldRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Tag,
                        Name,
                        Type,
                        DefaultValue,
                        MultiValues,
                        ExcludedInScripts,
                        GUIProperties,
                        OtherProperties,
                        null,
                        null};
                if ((parentCustomFieldsPropertiesRowByCustomFieldsProperties_CustomField != null)) {
                    columnValuesArray[9] = parentCustomFieldsPropertiesRowByCustomFieldsProperties_CustomField[3];
                }
                rowCustomFieldRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustomFieldRow);
                return rowCustomFieldRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustomFieldDataTable cln = ((CustomFieldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustomFieldDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTag = base.Columns["Tag"];
                this.columnName = base.Columns["Name"];
                this.columnType = base.Columns["Type"];
                this.columnDefaultValue = base.Columns["DefaultValue"];
                this.columnMultiValues = base.Columns["MultiValues"];
                this.columnExcludedInScripts = base.Columns["ExcludedInScripts"];
                this.columnGUIProperties = base.Columns["GUIProperties"];
                this.columnOtherProperties = base.Columns["OtherProperties"];
                this.columnCustomField_Id = base.Columns["CustomField_Id"];
                this.columnCustomFieldsProperties_Id = base.Columns["CustomFieldsProperties_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTag = new global::System.Data.DataColumn("Tag", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTag);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnType);
                this.columnDefaultValue = new global::System.Data.DataColumn("DefaultValue", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDefaultValue);
                this.columnMultiValues = new global::System.Data.DataColumn("MultiValues", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMultiValues);
                this.columnExcludedInScripts = new global::System.Data.DataColumn("ExcludedInScripts", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExcludedInScripts);
                this.columnGUIProperties = new global::System.Data.DataColumn("GUIProperties", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnGUIProperties);
                this.columnOtherProperties = new global::System.Data.DataColumn("OtherProperties", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOtherProperties);
                this.columnCustomField_Id = new global::System.Data.DataColumn("CustomField_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCustomField_Id);
                this.columnCustomFieldsProperties_Id = new global::System.Data.DataColumn("CustomFieldsProperties_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCustomFieldsProperties_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCustomField_Id}, true));
                this.columnTag.Namespace = "";
                this.columnName.Namespace = "";
                this.columnType.Namespace = "";
                this.columnDefaultValue.Namespace = "";
                this.columnMultiValues.Namespace = "";
                this.columnExcludedInScripts.Namespace = "";
                this.columnGUIProperties.Namespace = "";
                this.columnOtherProperties.Namespace = "";
                this.columnCustomField_Id.AutoIncrement = true;
                this.columnCustomField_Id.AllowDBNull = false;
                this.columnCustomField_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldRow NewCustomFieldRow() {
                return ((CustomFieldRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustomFieldRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustomFieldRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomFieldRowChanged != null)) {
                    this.CustomFieldRowChanged(this, new CustomFieldRowChangeEvent(((CustomFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomFieldRowChanging != null)) {
                    this.CustomFieldRowChanging(this, new CustomFieldRowChangeEvent(((CustomFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomFieldRowDeleted != null)) {
                    this.CustomFieldRowDeleted(this, new CustomFieldRowChangeEvent(((CustomFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomFieldRowDeleting != null)) {
                    this.CustomFieldRowDeleting(this, new CustomFieldRowChangeEvent(((CustomFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomFieldRow(CustomFieldRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomFieldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListItemDataTable : global::System.Data.TypedTableBase<ListItemRow> {
            
            private global::System.Data.DataColumn columnText;
            
            private global::System.Data.DataColumn columnCustomField_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListItemDataTable() {
                this.TableName = "ListItem";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListItemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListItemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomField_IdColumn {
                get {
                    return this.columnCustomField_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListItemRow this[int index] {
                get {
                    return ((ListItemRow)(this.Rows[index]));
                }
            }
            
            public event ListItemRowChangeEventHandler ListItemRowChanging;
            
            public event ListItemRowChangeEventHandler ListItemRowChanged;
            
            public event ListItemRowChangeEventHandler ListItemRowDeleting;
            
            public event ListItemRowChangeEventHandler ListItemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListItemRow(ListItemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListItemRow AddListItemRow(string Text, CustomFieldRow parentCustomFieldRowByCustomField_ListItem) {
                ListItemRow rowListItemRow = ((ListItemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Text,
                        null};
                if ((parentCustomFieldRowByCustomField_ListItem != null)) {
                    columnValuesArray[1] = parentCustomFieldRowByCustomField_ListItem[8];
                }
                rowListItemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListItemRow);
                return rowListItemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListItemDataTable cln = ((ListItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListItemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnText = base.Columns["Text"];
                this.columnCustomField_Id = base.Columns["CustomField_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnText = new global::System.Data.DataColumn("Text", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnText);
                this.columnCustomField_Id = new global::System.Data.DataColumn("CustomField_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCustomField_Id);
                this.columnText.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListItemRow NewListItemRow() {
                return ((ListItemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListItemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListItemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListItemRowChanged != null)) {
                    this.ListItemRowChanged(this, new ListItemRowChangeEvent(((ListItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListItemRowChanging != null)) {
                    this.ListItemRowChanging(this, new ListItemRowChangeEvent(((ListItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListItemRowDeleted != null)) {
                    this.ListItemRowDeleted(this, new ListItemRowChangeEvent(((ListItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListItemRowDeleting != null)) {
                    this.ListItemRowDeleting(this, new ListItemRowChangeEvent(((ListItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListItemRow(ListItemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListItemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ContentsDataTable : global::System.Data.TypedTableBase<ContentsRow> {
            
            private global::System.Data.DataColumn columnContents_Id;
            
            private global::System.Data.DataColumn columnCatalog_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsDataTable() {
                this.TableName = "Contents";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ContentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Contents_IdColumn {
                get {
                    return this.columnContents_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Catalog_IdColumn {
                get {
                    return this.columnCatalog_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRow this[int index] {
                get {
                    return ((ContentsRow)(this.Rows[index]));
                }
            }
            
            public event ContentsRowChangeEventHandler ContentsRowChanging;
            
            public event ContentsRowChangeEventHandler ContentsRowChanged;
            
            public event ContentsRowChangeEventHandler ContentsRowDeleting;
            
            public event ContentsRowChangeEventHandler ContentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddContentsRow(ContentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRow AddContentsRow(CatalogRow parentCatalogRowByCatalog_Contents) {
                ContentsRow rowContentsRow = ((ContentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentCatalogRowByCatalog_Contents != null)) {
                    columnValuesArray[1] = parentCatalogRowByCatalog_Contents[0];
                }
                rowContentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowContentsRow);
                return rowContentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ContentsDataTable cln = ((ContentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ContentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContents_Id = base.Columns["Contents_Id"];
                this.columnCatalog_Id = base.Columns["Catalog_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContents_Id = new global::System.Data.DataColumn("Contents_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnContents_Id);
                this.columnCatalog_Id = new global::System.Data.DataColumn("Catalog_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCatalog_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnContents_Id}, true));
                this.columnContents_Id.AutoIncrement = true;
                this.columnContents_Id.AllowDBNull = false;
                this.columnContents_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRow NewContentsRow() {
                return ((ContentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ContentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ContentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ContentsRowChanged != null)) {
                    this.ContentsRowChanged(this, new ContentsRowChangeEvent(((ContentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ContentsRowChanging != null)) {
                    this.ContentsRowChanging(this, new ContentsRowChangeEvent(((ContentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ContentsRowDeleted != null)) {
                    this.ContentsRowDeleted(this, new ContentsRowChangeEvent(((ContentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ContentsRowDeleting != null)) {
                    this.ContentsRowDeleting(this, new ContentsRowChangeEvent(((ContentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveContentsRow(ContentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ContentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MovieDataTable : global::System.Data.TypedTableBase<MovieRow> {
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnChecked;
            
            private global::System.Data.DataColumn columnMediaLabel;
            
            private global::System.Data.DataColumn columnMediaType;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnBorrower;
            
            private global::System.Data.DataColumn columnRating;
            
            private global::System.Data.DataColumn columnOriginalTitle;
            
            private global::System.Data.DataColumn columnTranslatedTitle;
            
            private global::System.Data.DataColumn columnFormattedTitle;
            
            private global::System.Data.DataColumn columnDirector;
            
            private global::System.Data.DataColumn columnProducer;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnActors;
            
            private global::System.Data.DataColumn columnURL;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnVideoFormat;
            
            private global::System.Data.DataColumn columnVideoBitrate;
            
            private global::System.Data.DataColumn columnAudioFormat;
            
            private global::System.Data.DataColumn columnAudioBitrate;
            
            private global::System.Data.DataColumn columnResolution;
            
            private global::System.Data.DataColumn columnFramerate;
            
            private global::System.Data.DataColumn columnLanguages;
            
            private global::System.Data.DataColumn columnSubtitles;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnDisks;
            
            private global::System.Data.DataColumn columnPicture;
            
            private global::System.Data.DataColumn columnDateAdded;
            
            private global::System.Data.DataColumn columnLength_Num;
            
            private global::System.Data.DataColumn columnFanart;
            
            private global::System.Data.DataColumn columnCertification;
            
            private global::System.Data.DataColumn columnWriter;
            
            private global::System.Data.DataColumn columnWatched;
            
            private global::System.Data.DataColumn columnDateWatched;
            
            private global::System.Data.DataColumn columnIMDB_Id;
            
            private global::System.Data.DataColumn columnTMDB_Id;
            
            private global::System.Data.DataColumn columnSourceTrailer;
            
            private global::System.Data.DataColumn columnTagLine;
            
            private global::System.Data.DataColumn columnTags;
            
            private global::System.Data.DataColumn columnStudio;
            
            private global::System.Data.DataColumn columnIMDB_Rank;
            
            private global::System.Data.DataColumn columnIsOnline;
            
            private global::System.Data.DataColumn columnIsOnlineTrailer;
            
            private global::System.Data.DataColumn columnAspectratio;
            
            private global::System.Data.DataColumn columnRatingUser;
            
            private global::System.Data.DataColumn columnEdition;
            
            private global::System.Data.DataColumn columnMovie_Id;
            
            private global::System.Data.DataColumn columnContents_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieDataTable() {
                this.TableName = "Movie";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MovieDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MovieDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckedColumn {
                get {
                    return this.columnChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MediaLabelColumn {
                get {
                    return this.columnMediaLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MediaTypeColumn {
                get {
                    return this.columnMediaType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BorrowerColumn {
                get {
                    return this.columnBorrower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatingColumn {
                get {
                    return this.columnRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalTitleColumn {
                get {
                    return this.columnOriginalTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TranslatedTitleColumn {
                get {
                    return this.columnTranslatedTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormattedTitleColumn {
                get {
                    return this.columnFormattedTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DirectorColumn {
                get {
                    return this.columnDirector;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProducerColumn {
                get {
                    return this.columnProducer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActorsColumn {
                get {
                    return this.columnActors;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn URLColumn {
                get {
                    return this.columnURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoFormatColumn {
                get {
                    return this.columnVideoFormat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoBitrateColumn {
                get {
                    return this.columnVideoBitrate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AudioFormatColumn {
                get {
                    return this.columnAudioFormat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AudioBitrateColumn {
                get {
                    return this.columnAudioBitrate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResolutionColumn {
                get {
                    return this.columnResolution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FramerateColumn {
                get {
                    return this.columnFramerate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LanguagesColumn {
                get {
                    return this.columnLanguages;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubtitlesColumn {
                get {
                    return this.columnSubtitles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisksColumn {
                get {
                    return this.columnDisks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureColumn {
                get {
                    return this.columnPicture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateAddedColumn {
                get {
                    return this.columnDateAdded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Length_NumColumn {
                get {
                    return this.columnLength_Num;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FanartColumn {
                get {
                    return this.columnFanart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CertificationColumn {
                get {
                    return this.columnCertification;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WriterColumn {
                get {
                    return this.columnWriter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchedColumn {
                get {
                    return this.columnWatched;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateWatchedColumn {
                get {
                    return this.columnDateWatched;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IMDB_IdColumn {
                get {
                    return this.columnIMDB_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TMDB_IdColumn {
                get {
                    return this.columnTMDB_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceTrailerColumn {
                get {
                    return this.columnSourceTrailer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TagLineColumn {
                get {
                    return this.columnTagLine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TagsColumn {
                get {
                    return this.columnTags;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudioColumn {
                get {
                    return this.columnStudio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IMDB_RankColumn {
                get {
                    return this.columnIMDB_Rank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOnlineColumn {
                get {
                    return this.columnIsOnline;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOnlineTrailerColumn {
                get {
                    return this.columnIsOnlineTrailer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AspectratioColumn {
                get {
                    return this.columnAspectratio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatingUserColumn {
                get {
                    return this.columnRatingUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EditionColumn {
                get {
                    return this.columnEdition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Movie_IdColumn {
                get {
                    return this.columnMovie_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Contents_IdColumn {
                get {
                    return this.columnContents_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRow this[int index] {
                get {
                    return ((MovieRow)(this.Rows[index]));
                }
            }
            
            public event MovieRowChangeEventHandler MovieRowChanging;
            
            public event MovieRowChangeEventHandler MovieRowChanged;
            
            public event MovieRowChangeEventHandler MovieRowDeleting;
            
            public event MovieRowChangeEventHandler MovieRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMovieRow(MovieRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRow AddMovieRow(
                        int Number, 
                        string Checked, 
                        string MediaLabel, 
                        string MediaType, 
                        string Source, 
                        string Date, 
                        string Borrower, 
                        decimal Rating, 
                        string OriginalTitle, 
                        string TranslatedTitle, 
                        string FormattedTitle, 
                        string Director, 
                        string Producer, 
                        string Country, 
                        string Category, 
                        string Year, 
                        string Length, 
                        string Actors, 
                        string URL, 
                        string Description, 
                        string Comments, 
                        string VideoFormat, 
                        string VideoBitrate, 
                        string AudioFormat, 
                        string AudioBitrate, 
                        string Resolution, 
                        string Framerate, 
                        string Languages, 
                        string Subtitles, 
                        string Size, 
                        string Disks, 
                        string Picture, 
                        System.DateTime DateAdded, 
                        int Length_Num, 
                        string Fanart, 
                        string Certification, 
                        string Writer, 
                        string Watched, 
                        System.DateTime DateWatched, 
                        string IMDB_Id, 
                        string TMDB_Id, 
                        string SourceTrailer, 
                        string TagLine, 
                        string Tags, 
                        string Studio, 
                        string IMDB_Rank, 
                        string IsOnline, 
                        string IsOnlineTrailer, 
                        string Aspectratio, 
                        decimal RatingUser, 
                        string Edition, 
                        ContentsRow parentContentsRowByContents_Movie) {
                MovieRow rowMovieRow = ((MovieRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Number,
                        Checked,
                        MediaLabel,
                        MediaType,
                        Source,
                        Date,
                        Borrower,
                        Rating,
                        OriginalTitle,
                        TranslatedTitle,
                        FormattedTitle,
                        Director,
                        Producer,
                        Country,
                        Category,
                        Year,
                        Length,
                        Actors,
                        URL,
                        Description,
                        Comments,
                        VideoFormat,
                        VideoBitrate,
                        AudioFormat,
                        AudioBitrate,
                        Resolution,
                        Framerate,
                        Languages,
                        Subtitles,
                        Size,
                        Disks,
                        Picture,
                        DateAdded,
                        Length_Num,
                        Fanart,
                        Certification,
                        Writer,
                        Watched,
                        DateWatched,
                        IMDB_Id,
                        TMDB_Id,
                        SourceTrailer,
                        TagLine,
                        Tags,
                        Studio,
                        IMDB_Rank,
                        IsOnline,
                        IsOnlineTrailer,
                        Aspectratio,
                        RatingUser,
                        Edition,
                        null,
                        null};
                if ((parentContentsRowByContents_Movie != null)) {
                    columnValuesArray[52] = parentContentsRowByContents_Movie[0];
                }
                rowMovieRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMovieRow);
                return rowMovieRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MovieDataTable cln = ((MovieDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MovieDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumber = base.Columns["Number"];
                this.columnChecked = base.Columns["Checked"];
                this.columnMediaLabel = base.Columns["MediaLabel"];
                this.columnMediaType = base.Columns["MediaType"];
                this.columnSource = base.Columns["Source"];
                this.columnDate = base.Columns["Date"];
                this.columnBorrower = base.Columns["Borrower"];
                this.columnRating = base.Columns["Rating"];
                this.columnOriginalTitle = base.Columns["OriginalTitle"];
                this.columnTranslatedTitle = base.Columns["TranslatedTitle"];
                this.columnFormattedTitle = base.Columns["FormattedTitle"];
                this.columnDirector = base.Columns["Director"];
                this.columnProducer = base.Columns["Producer"];
                this.columnCountry = base.Columns["Country"];
                this.columnCategory = base.Columns["Category"];
                this.columnYear = base.Columns["Year"];
                this.columnLength = base.Columns["Length"];
                this.columnActors = base.Columns["Actors"];
                this.columnURL = base.Columns["URL"];
                this.columnDescription = base.Columns["Description"];
                this.columnComments = base.Columns["Comments"];
                this.columnVideoFormat = base.Columns["VideoFormat"];
                this.columnVideoBitrate = base.Columns["VideoBitrate"];
                this.columnAudioFormat = base.Columns["AudioFormat"];
                this.columnAudioBitrate = base.Columns["AudioBitrate"];
                this.columnResolution = base.Columns["Resolution"];
                this.columnFramerate = base.Columns["Framerate"];
                this.columnLanguages = base.Columns["Languages"];
                this.columnSubtitles = base.Columns["Subtitles"];
                this.columnSize = base.Columns["Size"];
                this.columnDisks = base.Columns["Disks"];
                this.columnPicture = base.Columns["Picture"];
                this.columnDateAdded = base.Columns["DateAdded"];
                this.columnLength_Num = base.Columns["Length_Num"];
                this.columnFanart = base.Columns["Fanart"];
                this.columnCertification = base.Columns["Certification"];
                this.columnWriter = base.Columns["Writer"];
                this.columnWatched = base.Columns["Watched"];
                this.columnDateWatched = base.Columns["DateWatched"];
                this.columnIMDB_Id = base.Columns["IMDB_Id"];
                this.columnTMDB_Id = base.Columns["TMDB_Id"];
                this.columnSourceTrailer = base.Columns["SourceTrailer"];
                this.columnTagLine = base.Columns["TagLine"];
                this.columnTags = base.Columns["Tags"];
                this.columnStudio = base.Columns["Studio"];
                this.columnIMDB_Rank = base.Columns["IMDB_Rank"];
                this.columnIsOnline = base.Columns["IsOnline"];
                this.columnIsOnlineTrailer = base.Columns["IsOnlineTrailer"];
                this.columnAspectratio = base.Columns["Aspectratio"];
                this.columnRatingUser = base.Columns["RatingUser"];
                this.columnEdition = base.Columns["Edition"];
                this.columnMovie_Id = base.Columns["Movie_Id"];
                this.columnContents_Id = base.Columns["Contents_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumber);
                this.columnChecked = new global::System.Data.DataColumn("Checked", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnChecked);
                this.columnMediaLabel = new global::System.Data.DataColumn("MediaLabel", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMediaLabel);
                this.columnMediaType = new global::System.Data.DataColumn("MediaType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMediaType);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSource);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDate);
                this.columnBorrower = new global::System.Data.DataColumn("Borrower", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBorrower);
                this.columnRating = new global::System.Data.DataColumn("Rating", typeof(decimal), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRating);
                this.columnOriginalTitle = new global::System.Data.DataColumn("OriginalTitle", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOriginalTitle);
                this.columnTranslatedTitle = new global::System.Data.DataColumn("TranslatedTitle", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTranslatedTitle);
                this.columnFormattedTitle = new global::System.Data.DataColumn("FormattedTitle", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFormattedTitle);
                this.columnDirector = new global::System.Data.DataColumn("Director", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDirector);
                this.columnProducer = new global::System.Data.DataColumn("Producer", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnProducer);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCountry);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCategory);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnYear);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLength);
                this.columnActors = new global::System.Data.DataColumn("Actors", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActors);
                this.columnURL = new global::System.Data.DataColumn("URL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnURL);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDescription);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnComments);
                this.columnVideoFormat = new global::System.Data.DataColumn("VideoFormat", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVideoFormat);
                this.columnVideoBitrate = new global::System.Data.DataColumn("VideoBitrate", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVideoBitrate);
                this.columnAudioFormat = new global::System.Data.DataColumn("AudioFormat", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAudioFormat);
                this.columnAudioBitrate = new global::System.Data.DataColumn("AudioBitrate", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAudioBitrate);
                this.columnResolution = new global::System.Data.DataColumn("Resolution", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnResolution);
                this.columnFramerate = new global::System.Data.DataColumn("Framerate", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFramerate);
                this.columnLanguages = new global::System.Data.DataColumn("Languages", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLanguages);
                this.columnSubtitles = new global::System.Data.DataColumn("Subtitles", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSubtitles);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSize);
                this.columnDisks = new global::System.Data.DataColumn("Disks", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisks);
                this.columnPicture = new global::System.Data.DataColumn("Picture", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPicture);
                this.columnDateAdded = new global::System.Data.DataColumn("DateAdded", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateAdded);
                this.columnLength_Num = new global::System.Data.DataColumn("Length_Num", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength_Num);
                this.columnFanart = new global::System.Data.DataColumn("Fanart", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFanart);
                this.columnCertification = new global::System.Data.DataColumn("Certification", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCertification);
                this.columnWriter = new global::System.Data.DataColumn("Writer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWriter);
                this.columnWatched = new global::System.Data.DataColumn("Watched", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatched);
                this.columnDateWatched = new global::System.Data.DataColumn("DateWatched", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateWatched);
                this.columnIMDB_Id = new global::System.Data.DataColumn("IMDB_Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIMDB_Id);
                this.columnTMDB_Id = new global::System.Data.DataColumn("TMDB_Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTMDB_Id);
                this.columnSourceTrailer = new global::System.Data.DataColumn("SourceTrailer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceTrailer);
                this.columnTagLine = new global::System.Data.DataColumn("TagLine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTagLine);
                this.columnTags = new global::System.Data.DataColumn("Tags", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTags);
                this.columnStudio = new global::System.Data.DataColumn("Studio", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudio);
                this.columnIMDB_Rank = new global::System.Data.DataColumn("IMDB_Rank", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIMDB_Rank);
                this.columnIsOnline = new global::System.Data.DataColumn("IsOnline", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOnline);
                this.columnIsOnlineTrailer = new global::System.Data.DataColumn("IsOnlineTrailer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOnlineTrailer);
                this.columnAspectratio = new global::System.Data.DataColumn("Aspectratio", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAspectratio);
                this.columnRatingUser = new global::System.Data.DataColumn("RatingUser", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRatingUser);
                this.columnEdition = new global::System.Data.DataColumn("Edition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEdition);
                this.columnMovie_Id = new global::System.Data.DataColumn("Movie_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMovie_Id);
                this.columnContents_Id = new global::System.Data.DataColumn("Contents_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnContents_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMovie_Id}, true));
                this.columnNumber.Namespace = "";
                this.columnChecked.Namespace = "";
                this.columnMediaLabel.Namespace = "";
                this.columnMediaType.Namespace = "";
                this.columnSource.Namespace = "";
                this.columnDate.Namespace = "";
                this.columnBorrower.Namespace = "";
                this.columnRating.Namespace = "";
                this.columnOriginalTitle.Namespace = "";
                this.columnTranslatedTitle.Namespace = "";
                this.columnFormattedTitle.Namespace = "";
                this.columnDirector.Namespace = "";
                this.columnProducer.Namespace = "";
                this.columnCountry.Namespace = "";
                this.columnCategory.Namespace = "";
                this.columnYear.Namespace = "";
                this.columnLength.Namespace = "";
                this.columnActors.Namespace = "";
                this.columnURL.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnComments.Namespace = "";
                this.columnVideoFormat.Namespace = "";
                this.columnVideoBitrate.Namespace = "";
                this.columnAudioFormat.Namespace = "";
                this.columnAudioBitrate.Namespace = "";
                this.columnResolution.Namespace = "";
                this.columnFramerate.Namespace = "";
                this.columnLanguages.Namespace = "";
                this.columnSubtitles.Namespace = "";
                this.columnSize.Namespace = "";
                this.columnDisks.Namespace = "";
                this.columnPicture.Namespace = "";
                this.columnMovie_Id.AutoIncrement = true;
                this.columnMovie_Id.AllowDBNull = false;
                this.columnMovie_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRow NewMovieRow() {
                return ((MovieRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MovieRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MovieRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MovieRowChanged != null)) {
                    this.MovieRowChanged(this, new MovieRowChangeEvent(((MovieRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MovieRowChanging != null)) {
                    this.MovieRowChanging(this, new MovieRowChangeEvent(((MovieRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MovieRowDeleted != null)) {
                    this.MovieRowDeleted(this, new MovieRowChangeEvent(((MovieRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MovieRowDeleting != null)) {
                    this.MovieRowDeleting(this, new MovieRowChangeEvent(((MovieRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMovieRow(MovieRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MovieDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomFieldsDataTable : global::System.Data.TypedTableBase<CustomFieldsRow> {
            
            private global::System.Data.DataColumn column_Writer_Extended;
            
            private global::System.Data.DataColumn column_Certification_Extended;
            
            private global::System.Data.DataColumn columnTest1;
            
            private global::System.Data.DataColumn columnTest2;
            
            private global::System.Data.DataColumn columnMovie_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsDataTable() {
                this.TableName = "CustomFields";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomFieldsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomFieldsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Writer_ExtendedColumn {
                get {
                    return this.column_Writer_Extended;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Certification_ExtendedColumn {
                get {
                    return this.column_Certification_Extended;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Test1Column {
                get {
                    return this.columnTest1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Test2Column {
                get {
                    return this.columnTest2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Movie_IdColumn {
                get {
                    return this.columnMovie_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsRow this[int index] {
                get {
                    return ((CustomFieldsRow)(this.Rows[index]));
                }
            }
            
            public event CustomFieldsRowChangeEventHandler CustomFieldsRowChanging;
            
            public event CustomFieldsRowChangeEventHandler CustomFieldsRowChanged;
            
            public event CustomFieldsRowChangeEventHandler CustomFieldsRowDeleting;
            
            public event CustomFieldsRowChangeEventHandler CustomFieldsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomFieldsRow(CustomFieldsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsRow AddCustomFieldsRow(string _Writer_Extended, string _Certification_Extended, string Test1, string Test2, MovieRow parentMovieRowByMovie_CustomFields) {
                CustomFieldsRow rowCustomFieldsRow = ((CustomFieldsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        _Writer_Extended,
                        _Certification_Extended,
                        Test1,
                        Test2,
                        null};
                if ((parentMovieRowByMovie_CustomFields != null)) {
                    columnValuesArray[4] = parentMovieRowByMovie_CustomFields[51];
                }
                rowCustomFieldsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustomFieldsRow);
                return rowCustomFieldsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustomFieldsDataTable cln = ((CustomFieldsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustomFieldsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_Writer_Extended = base.Columns["Writer-Extended"];
                this.column_Certification_Extended = base.Columns["Certification-Extended"];
                this.columnTest1 = base.Columns["Test1"];
                this.columnTest2 = base.Columns["Test2"];
                this.columnMovie_Id = base.Columns["Movie_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_Writer_Extended = new global::System.Data.DataColumn("Writer-Extended", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_Writer_Extended);
                this.column_Certification_Extended = new global::System.Data.DataColumn("Certification-Extended", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_Certification_Extended);
                this.columnTest1 = new global::System.Data.DataColumn("Test1", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTest1);
                this.columnTest2 = new global::System.Data.DataColumn("Test2", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTest2);
                this.columnMovie_Id = new global::System.Data.DataColumn("Movie_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMovie_Id);
                this.column_Writer_Extended.Namespace = "";
                this.column_Certification_Extended.Namespace = "";
                this.columnTest1.Namespace = "";
                this.columnTest2.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsRow NewCustomFieldsRow() {
                return ((CustomFieldsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustomFieldsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustomFieldsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomFieldsRowChanged != null)) {
                    this.CustomFieldsRowChanged(this, new CustomFieldsRowChangeEvent(((CustomFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomFieldsRowChanging != null)) {
                    this.CustomFieldsRowChanging(this, new CustomFieldsRowChangeEvent(((CustomFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomFieldsRowDeleted != null)) {
                    this.CustomFieldsRowDeleted(this, new CustomFieldsRowChangeEvent(((CustomFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomFieldsRowDeleting != null)) {
                    this.CustomFieldsRowDeleting(this, new CustomFieldsRowChangeEvent(((CustomFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomFieldsRow(CustomFieldsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomFieldsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PersonsDataTable : global::System.Data.TypedTableBase<PersonsRow> {
            
            private global::System.Data.DataColumn columnPersons_Id;
            
            private global::System.Data.DataColumn columnAntMovieCatalog_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonsDataTable() {
                this.TableName = "Persons";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PersonsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PersonsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Persons_IdColumn {
                get {
                    return this.columnPersons_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AntMovieCatalog_IdColumn {
                get {
                    return this.columnAntMovieCatalog_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonsRow this[int index] {
                get {
                    return ((PersonsRow)(this.Rows[index]));
                }
            }
            
            public event PersonsRowChangeEventHandler PersonsRowChanging;
            
            public event PersonsRowChangeEventHandler PersonsRowChanged;
            
            public event PersonsRowChangeEventHandler PersonsRowDeleting;
            
            public event PersonsRowChangeEventHandler PersonsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPersonsRow(PersonsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonsRow AddPersonsRow(AntMovieCatalogRow parentAntMovieCatalogRowByAntMovieCatalog_Persons) {
                PersonsRow rowPersonsRow = ((PersonsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentAntMovieCatalogRowByAntMovieCatalog_Persons != null)) {
                    columnValuesArray[1] = parentAntMovieCatalogRowByAntMovieCatalog_Persons[3];
                }
                rowPersonsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPersonsRow);
                return rowPersonsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PersonsDataTable cln = ((PersonsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PersonsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPersons_Id = base.Columns["Persons_Id"];
                this.columnAntMovieCatalog_Id = base.Columns["AntMovieCatalog_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPersons_Id = new global::System.Data.DataColumn("Persons_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPersons_Id);
                this.columnAntMovieCatalog_Id = new global::System.Data.DataColumn("AntMovieCatalog_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAntMovieCatalog_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPersons_Id}, true));
                this.columnPersons_Id.AutoIncrement = true;
                this.columnPersons_Id.AllowDBNull = false;
                this.columnPersons_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonsRow NewPersonsRow() {
                return ((PersonsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PersonsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PersonsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PersonsRowChanged != null)) {
                    this.PersonsRowChanged(this, new PersonsRowChangeEvent(((PersonsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PersonsRowChanging != null)) {
                    this.PersonsRowChanging(this, new PersonsRowChangeEvent(((PersonsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PersonsRowDeleted != null)) {
                    this.PersonsRowDeleted(this, new PersonsRowChangeEvent(((PersonsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PersonsRowDeleting != null)) {
                    this.PersonsRowDeleting(this, new PersonsRowChangeEvent(((PersonsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePersonsRow(PersonsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PersonsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PersonDataTable : global::System.Data.TypedTableBase<PersonRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAlternateName;
            
            private global::System.Data.DataColumn columnBorn;
            
            private global::System.Data.DataColumn columnBirthPlace;
            
            private global::System.Data.DataColumn columnMiniBiography;
            
            private global::System.Data.DataColumn columnBiography;
            
            private global::System.Data.DataColumn columnURL;
            
            private global::System.Data.DataColumn columnIMDB_Id;
            
            private global::System.Data.DataColumn columnTMDB_Id;
            
            private global::System.Data.DataColumn columnIsActor;
            
            private global::System.Data.DataColumn columnIsProducer;
            
            private global::System.Data.DataColumn columnIsDirector;
            
            private global::System.Data.DataColumn columnIsWriter;
            
            private global::System.Data.DataColumn columnPhotos;
            
            private global::System.Data.DataColumn columnPicture;
            
            private global::System.Data.DataColumn columnPersons_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonDataTable() {
                this.TableName = "Person";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PersonDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PersonDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlternateNameColumn {
                get {
                    return this.columnAlternateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BornColumn {
                get {
                    return this.columnBorn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BirthPlaceColumn {
                get {
                    return this.columnBirthPlace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiniBiographyColumn {
                get {
                    return this.columnMiniBiography;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BiographyColumn {
                get {
                    return this.columnBiography;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn URLColumn {
                get {
                    return this.columnURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IMDB_IdColumn {
                get {
                    return this.columnIMDB_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TMDB_IdColumn {
                get {
                    return this.columnTMDB_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActorColumn {
                get {
                    return this.columnIsActor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsProducerColumn {
                get {
                    return this.columnIsProducer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDirectorColumn {
                get {
                    return this.columnIsDirector;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsWriterColumn {
                get {
                    return this.columnIsWriter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhotosColumn {
                get {
                    return this.columnPhotos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureColumn {
                get {
                    return this.columnPicture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Persons_IdColumn {
                get {
                    return this.columnPersons_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonRow this[int index] {
                get {
                    return ((PersonRow)(this.Rows[index]));
                }
            }
            
            public event PersonRowChangeEventHandler PersonRowChanging;
            
            public event PersonRowChangeEventHandler PersonRowChanged;
            
            public event PersonRowChangeEventHandler PersonRowDeleting;
            
            public event PersonRowChangeEventHandler PersonRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPersonRow(PersonRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonRow AddPersonRow(
                        string Name, 
                        string AlternateName, 
                        string Born, 
                        string BirthPlace, 
                        string MiniBiography, 
                        string Biography, 
                        string URL, 
                        string IMDB_Id, 
                        string TMDB_Id, 
                        bool IsActor, 
                        bool IsProducer, 
                        bool IsDirector, 
                        bool IsWriter, 
                        string Photos, 
                        string Picture, 
                        PersonsRow parentPersonsRowByPersons_Person) {
                PersonRow rowPersonRow = ((PersonRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        AlternateName,
                        Born,
                        BirthPlace,
                        MiniBiography,
                        Biography,
                        URL,
                        IMDB_Id,
                        TMDB_Id,
                        IsActor,
                        IsProducer,
                        IsDirector,
                        IsWriter,
                        Photos,
                        Picture,
                        null};
                if ((parentPersonsRowByPersons_Person != null)) {
                    columnValuesArray[15] = parentPersonsRowByPersons_Person[0];
                }
                rowPersonRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPersonRow);
                return rowPersonRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PersonDataTable cln = ((PersonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PersonDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnAlternateName = base.Columns["AlternateName"];
                this.columnBorn = base.Columns["Born"];
                this.columnBirthPlace = base.Columns["BirthPlace"];
                this.columnMiniBiography = base.Columns["MiniBiography"];
                this.columnBiography = base.Columns["Biography"];
                this.columnURL = base.Columns["URL"];
                this.columnIMDB_Id = base.Columns["IMDB_Id"];
                this.columnTMDB_Id = base.Columns["TMDB_Id"];
                this.columnIsActor = base.Columns["IsActor"];
                this.columnIsProducer = base.Columns["IsProducer"];
                this.columnIsDirector = base.Columns["IsDirector"];
                this.columnIsWriter = base.Columns["IsWriter"];
                this.columnPhotos = base.Columns["Photos"];
                this.columnPicture = base.Columns["Picture"];
                this.columnPersons_Id = base.Columns["Persons_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnAlternateName = new global::System.Data.DataColumn("AlternateName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAlternateName);
                this.columnBorn = new global::System.Data.DataColumn("Born", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBorn);
                this.columnBirthPlace = new global::System.Data.DataColumn("BirthPlace", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBirthPlace);
                this.columnMiniBiography = new global::System.Data.DataColumn("MiniBiography", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMiniBiography);
                this.columnBiography = new global::System.Data.DataColumn("Biography", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBiography);
                this.columnURL = new global::System.Data.DataColumn("URL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnURL);
                this.columnIMDB_Id = new global::System.Data.DataColumn("IMDB_Id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIMDB_Id);
                this.columnTMDB_Id = new global::System.Data.DataColumn("TMDB_Id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTMDB_Id);
                this.columnIsActor = new global::System.Data.DataColumn("IsActor", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsActor);
                this.columnIsProducer = new global::System.Data.DataColumn("IsProducer", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsProducer);
                this.columnIsDirector = new global::System.Data.DataColumn("IsDirector", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsDirector);
                this.columnIsWriter = new global::System.Data.DataColumn("IsWriter", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsWriter);
                this.columnPhotos = new global::System.Data.DataColumn("Photos", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPhotos);
                this.columnPicture = new global::System.Data.DataColumn("Picture", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPicture);
                this.columnPersons_Id = new global::System.Data.DataColumn("Persons_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPersons_Id);
                this.columnName.Namespace = "";
                this.columnAlternateName.Namespace = "";
                this.columnBorn.Namespace = "";
                this.columnBirthPlace.Namespace = "";
                this.columnMiniBiography.Namespace = "";
                this.columnBiography.Namespace = "";
                this.columnURL.Namespace = "";
                this.columnIMDB_Id.Namespace = "";
                this.columnTMDB_Id.Namespace = "";
                this.columnIsActor.Namespace = "";
                this.columnIsProducer.Namespace = "";
                this.columnIsDirector.Namespace = "";
                this.columnIsWriter.Namespace = "";
                this.columnPhotos.Namespace = "";
                this.columnPicture.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonRow NewPersonRow() {
                return ((PersonRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PersonRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PersonRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PersonRowChanged != null)) {
                    this.PersonRowChanged(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PersonRowChanging != null)) {
                    this.PersonRowChanging(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PersonRowDeleted != null)) {
                    this.PersonRowDeleted(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PersonRowDeleting != null)) {
                    this.PersonRowDeleting(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePersonRow(PersonRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PersonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MyFilmsSettingsDataTable : global::System.Data.TypedTableBase<MyFilmsSettingsRow> {
            
            private global::System.Data.DataColumn columnMyFilmsSettings_Id;
            
            private global::System.Data.DataColumn columnAntMovieCatalog_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyFilmsSettingsDataTable() {
                this.TableName = "MyFilmsSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MyFilmsSettingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MyFilmsSettingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MyFilmsSettings_IdColumn {
                get {
                    return this.columnMyFilmsSettings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AntMovieCatalog_IdColumn {
                get {
                    return this.columnAntMovieCatalog_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyFilmsSettingsRow this[int index] {
                get {
                    return ((MyFilmsSettingsRow)(this.Rows[index]));
                }
            }
            
            public event MyFilmsSettingsRowChangeEventHandler MyFilmsSettingsRowChanging;
            
            public event MyFilmsSettingsRowChangeEventHandler MyFilmsSettingsRowChanged;
            
            public event MyFilmsSettingsRowChangeEventHandler MyFilmsSettingsRowDeleting;
            
            public event MyFilmsSettingsRowChangeEventHandler MyFilmsSettingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMyFilmsSettingsRow(MyFilmsSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyFilmsSettingsRow AddMyFilmsSettingsRow(AntMovieCatalogRow parentAntMovieCatalogRowByAntMovieCatalog_MyFilmsSettings) {
                MyFilmsSettingsRow rowMyFilmsSettingsRow = ((MyFilmsSettingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentAntMovieCatalogRowByAntMovieCatalog_MyFilmsSettings != null)) {
                    columnValuesArray[1] = parentAntMovieCatalogRowByAntMovieCatalog_MyFilmsSettings[3];
                }
                rowMyFilmsSettingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMyFilmsSettingsRow);
                return rowMyFilmsSettingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MyFilmsSettingsDataTable cln = ((MyFilmsSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MyFilmsSettingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMyFilmsSettings_Id = base.Columns["MyFilmsSettings_Id"];
                this.columnAntMovieCatalog_Id = base.Columns["AntMovieCatalog_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMyFilmsSettings_Id = new global::System.Data.DataColumn("MyFilmsSettings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMyFilmsSettings_Id);
                this.columnAntMovieCatalog_Id = new global::System.Data.DataColumn("AntMovieCatalog_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAntMovieCatalog_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMyFilmsSettings_Id}, true));
                this.columnMyFilmsSettings_Id.AutoIncrement = true;
                this.columnMyFilmsSettings_Id.AllowDBNull = false;
                this.columnMyFilmsSettings_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyFilmsSettingsRow NewMyFilmsSettingsRow() {
                return ((MyFilmsSettingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MyFilmsSettingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MyFilmsSettingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MyFilmsSettingsRowChanged != null)) {
                    this.MyFilmsSettingsRowChanged(this, new MyFilmsSettingsRowChangeEvent(((MyFilmsSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MyFilmsSettingsRowChanging != null)) {
                    this.MyFilmsSettingsRowChanging(this, new MyFilmsSettingsRowChangeEvent(((MyFilmsSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MyFilmsSettingsRowDeleted != null)) {
                    this.MyFilmsSettingsRowDeleted(this, new MyFilmsSettingsRowChangeEvent(((MyFilmsSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MyFilmsSettingsRowDeleting != null)) {
                    this.MyFilmsSettingsRowDeleting(this, new MyFilmsSettingsRowChangeEvent(((MyFilmsSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMyFilmsSettingsRow(MyFilmsSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MyFilmsSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UsersDataTable : global::System.Data.TypedTableBase<UsersRow> {
            
            private global::System.Data.DataColumn columnUsers_Id;
            
            private global::System.Data.DataColumn columnMyFilmsSettings_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersDataTable() {
                this.TableName = "Users";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UsersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Users_IdColumn {
                get {
                    return this.columnUsers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MyFilmsSettings_IdColumn {
                get {
                    return this.columnMyFilmsSettings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow this[int index] {
                get {
                    return ((UsersRow)(this.Rows[index]));
                }
            }
            
            public event UsersRowChangeEventHandler UsersRowChanging;
            
            public event UsersRowChangeEventHandler UsersRowChanged;
            
            public event UsersRowChangeEventHandler UsersRowDeleting;
            
            public event UsersRowChangeEventHandler UsersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsersRow(UsersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow AddUsersRow(MyFilmsSettingsRow parentMyFilmsSettingsRowByMyFilmsSettings_Users) {
                UsersRow rowUsersRow = ((UsersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentMyFilmsSettingsRowByMyFilmsSettings_Users != null)) {
                    columnValuesArray[1] = parentMyFilmsSettingsRowByMyFilmsSettings_Users[0];
                }
                rowUsersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUsersRow);
                return rowUsersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUsers_Id = base.Columns["Users_Id"];
                this.columnMyFilmsSettings_Id = base.Columns["MyFilmsSettings_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUsers_Id = new global::System.Data.DataColumn("Users_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnUsers_Id);
                this.columnMyFilmsSettings_Id = new global::System.Data.DataColumn("MyFilmsSettings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMyFilmsSettings_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUsers_Id}, true));
                this.columnUsers_Id.AutoIncrement = true;
                this.columnUsers_Id.AllowDBNull = false;
                this.columnUsers_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow NewUsersRow() {
                return ((UsersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UsersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UsersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersRowChanged != null)) {
                    this.UsersRowChanged(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersRowChanging != null)) {
                    this.UsersRowChanging(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersRowDeleted != null)) {
                    this.UsersRowDeleted(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersRowDeleting != null)) {
                    this.UsersRowDeleting(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsersRow(UsersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserDataTable : global::System.Data.TypedTableBase<UserRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAlias;
            
            private global::System.Data.DataColumn columnTraktName;
            
            private global::System.Data.DataColumn columnAge;
            
            private global::System.Data.DataColumn columnUsers_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserDataTable() {
                this.TableName = "User";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AliasColumn {
                get {
                    return this.columnAlias;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TraktNameColumn {
                get {
                    return this.columnTraktName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgeColumn {
                get {
                    return this.columnAge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Users_IdColumn {
                get {
                    return this.columnUsers_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow this[int index] {
                get {
                    return ((UserRow)(this.Rows[index]));
                }
            }
            
            public event UserRowChangeEventHandler UserRowChanging;
            
            public event UserRowChangeEventHandler UserRowChanged;
            
            public event UserRowChangeEventHandler UserRowDeleting;
            
            public event UserRowChangeEventHandler UserRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserRow(UserRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow AddUserRow(string Name, string Alias, string TraktName, string Age, UsersRow parentUsersRowByUsers_User) {
                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Alias,
                        TraktName,
                        Age,
                        null};
                if ((parentUsersRowByUsers_User != null)) {
                    columnValuesArray[4] = parentUsersRowByUsers_User[0];
                }
                rowUserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserRow);
                return rowUserRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserDataTable cln = ((UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnAlias = base.Columns["Alias"];
                this.columnTraktName = base.Columns["TraktName"];
                this.columnAge = base.Columns["Age"];
                this.columnUsers_Id = base.Columns["Users_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnAlias = new global::System.Data.DataColumn("Alias", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAlias);
                this.columnTraktName = new global::System.Data.DataColumn("TraktName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTraktName);
                this.columnAge = new global::System.Data.DataColumn("Age", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAge);
                this.columnUsers_Id = new global::System.Data.DataColumn("Users_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnUsers_Id);
                this.columnName.Namespace = "";
                this.columnAlias.Namespace = "";
                this.columnTraktName.Namespace = "";
                this.columnAge.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow NewUserRow() {
                return ((UserRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRowChanged != null)) {
                    this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRowChanging != null)) {
                    this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRowDeleted != null)) {
                    this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRowDeleting != null)) {
                    this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserRow(UserRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HistoryDataTable : global::System.Data.TypedTableBase<HistoryRow> {
            
            private global::System.Data.DataColumn columnHistory_Id;
            
            private global::System.Data.DataColumn columnAntMovieCatalog_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryDataTable() {
                this.TableName = "History";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HistoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HistoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn History_IdColumn {
                get {
                    return this.columnHistory_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AntMovieCatalog_IdColumn {
                get {
                    return this.columnAntMovieCatalog_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryRow this[int index] {
                get {
                    return ((HistoryRow)(this.Rows[index]));
                }
            }
            
            public event HistoryRowChangeEventHandler HistoryRowChanging;
            
            public event HistoryRowChangeEventHandler HistoryRowChanged;
            
            public event HistoryRowChangeEventHandler HistoryRowDeleting;
            
            public event HistoryRowChangeEventHandler HistoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHistoryRow(HistoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryRow AddHistoryRow(AntMovieCatalogRow parentAntMovieCatalogRowByAntMovieCatalog_History) {
                HistoryRow rowHistoryRow = ((HistoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentAntMovieCatalogRowByAntMovieCatalog_History != null)) {
                    columnValuesArray[1] = parentAntMovieCatalogRowByAntMovieCatalog_History[3];
                }
                rowHistoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHistoryRow);
                return rowHistoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HistoryDataTable cln = ((HistoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HistoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHistory_Id = base.Columns["History_Id"];
                this.columnAntMovieCatalog_Id = base.Columns["AntMovieCatalog_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHistory_Id = new global::System.Data.DataColumn("History_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnHistory_Id);
                this.columnAntMovieCatalog_Id = new global::System.Data.DataColumn("AntMovieCatalog_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAntMovieCatalog_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnHistory_Id}, true));
                this.columnHistory_Id.AutoIncrement = true;
                this.columnHistory_Id.AllowDBNull = false;
                this.columnHistory_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryRow NewHistoryRow() {
                return ((HistoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HistoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HistoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HistoryRowChanged != null)) {
                    this.HistoryRowChanged(this, new HistoryRowChangeEvent(((HistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HistoryRowChanging != null)) {
                    this.HistoryRowChanging(this, new HistoryRowChangeEvent(((HistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HistoryRowDeleted != null)) {
                    this.HistoryRowDeleted(this, new HistoryRowChangeEvent(((HistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HistoryRowDeleting != null)) {
                    this.HistoryRowDeleting(this, new HistoryRowChangeEvent(((HistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHistoryRow(HistoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HistoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WatchedRow : global::System.Data.DataRow {
            
            private WatchedDataTable tableWatched;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WatchedRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWatched = ((WatchedDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableWatched.NumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Number in Tabelle Watched ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableWatched.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWatched.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Date in Tabelle Watched ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableWatched.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string User {
                get {
                    try {
                        return ((string)(this[this.tableWatched.UserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte User in Tabelle Watched ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableWatched.UserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Config {
                get {
                    try {
                        return ((string)(this[this.tableWatched.ConfigColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Config in Tabelle Watched ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableWatched.ConfigColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MovieNumber {
                get {
                    try {
                        return ((string)(this[this.tableWatched.MovieNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MovieNumber in Tabelle Watched ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableWatched.MovieNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableWatched.TitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Title in Tabelle Watched ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableWatched.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Watched_Id {
                get {
                    return ((int)(this[this.tableWatched.Watched_IdColumn]));
                }
                set {
                    this[this.tableWatched.Watched_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Watched_Id_0 {
                get {
                    try {
                        return ((int)(this[this.tableWatched.Watched_Id_0Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Watched_Id_0 in Tabelle Watched ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableWatched.Watched_Id_0Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int History_Id {
                get {
                    try {
                        return ((int)(this[this.tableWatched.History_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte History_Id in Tabelle Watched ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableWatched.History_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchedRow WatchedRowParent {
                get {
                    return ((WatchedRow)(this.GetParentRow(this.Table.ParentRelations["Watched_Watched"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Watched_Watched"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryRow HistoryRow {
                get {
                    return ((HistoryRow)(this.GetParentRow(this.Table.ParentRelations["History_Watched"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["History_Watched"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableWatched.NumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableWatched.NumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableWatched.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableWatched.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNull() {
                return this.IsNull(this.tableWatched.UserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNull() {
                this[this.tableWatched.UserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfigNull() {
                return this.IsNull(this.tableWatched.ConfigColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfigNull() {
                this[this.tableWatched.ConfigColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMovieNumberNull() {
                return this.IsNull(this.tableWatched.MovieNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMovieNumberNull() {
                this[this.tableWatched.MovieNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleNull() {
                return this.IsNull(this.tableWatched.TitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleNull() {
                this[this.tableWatched.TitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWatched_Id_0Null() {
                return this.IsNull(this.tableWatched.Watched_Id_0Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWatched_Id_0Null() {
                this[this.tableWatched.Watched_Id_0Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHistory_IdNull() {
                return this.IsNull(this.tableWatched.History_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHistory_IdNull() {
                this[this.tableWatched.History_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchedRow[] GetWatchedRows() {
                if ((this.Table.ChildRelations["Watched_Watched"] == null)) {
                    return new WatchedRow[0];
                }
                else {
                    return ((WatchedRow[])(base.GetChildRows(this.Table.ChildRelations["Watched_Watched"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AntMovieCatalogRow : global::System.Data.DataRow {
            
            private AntMovieCatalogDataTable tableAntMovieCatalog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AntMovieCatalogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAntMovieCatalog = ((AntMovieCatalogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Format {
                get {
                    try {
                        return ((string)(this[this.tableAntMovieCatalog.FormatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Format in Tabelle AntMovieCatalog ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableAntMovieCatalog.FormatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Version {
                get {
                    try {
                        return ((string)(this[this.tableAntMovieCatalog.VersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Version in Tabelle AntMovieCatalog ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableAntMovieCatalog.VersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAntMovieCatalog.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Date in Tabelle AntMovieCatalog ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableAntMovieCatalog.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AntMovieCatalog_Id {
                get {
                    return ((int)(this[this.tableAntMovieCatalog.AntMovieCatalog_IdColumn]));
                }
                set {
                    this[this.tableAntMovieCatalog.AntMovieCatalog_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormatNull() {
                return this.IsNull(this.tableAntMovieCatalog.FormatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormatNull() {
                this[this.tableAntMovieCatalog.FormatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVersionNull() {
                return this.IsNull(this.tableAntMovieCatalog.VersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVersionNull() {
                this[this.tableAntMovieCatalog.VersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableAntMovieCatalog.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableAntMovieCatalog.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRow[] GetCatalogRows() {
                if ((this.Table.ChildRelations["AntMovieCatalog_Catalog"] == null)) {
                    return new CatalogRow[0];
                }
                else {
                    return ((CatalogRow[])(base.GetChildRows(this.Table.ChildRelations["AntMovieCatalog_Catalog"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonsRow[] GetPersonsRows() {
                if ((this.Table.ChildRelations["AntMovieCatalog_Persons"] == null)) {
                    return new PersonsRow[0];
                }
                else {
                    return ((PersonsRow[])(base.GetChildRows(this.Table.ChildRelations["AntMovieCatalog_Persons"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyFilmsSettingsRow[] GetMyFilmsSettingsRows() {
                if ((this.Table.ChildRelations["AntMovieCatalog_MyFilmsSettings"] == null)) {
                    return new MyFilmsSettingsRow[0];
                }
                else {
                    return ((MyFilmsSettingsRow[])(base.GetChildRows(this.Table.ChildRelations["AntMovieCatalog_MyFilmsSettings"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryRow[] GetHistoryRows() {
                if ((this.Table.ChildRelations["AntMovieCatalog_History"] == null)) {
                    return new HistoryRow[0];
                }
                else {
                    return ((HistoryRow[])(base.GetChildRows(this.Table.ChildRelations["AntMovieCatalog_History"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CatalogRow : global::System.Data.DataRow {
            
            private CatalogDataTable tableCatalog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CatalogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCatalog = ((CatalogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Catalog_Id {
                get {
                    return ((int)(this[this.tableCatalog.Catalog_IdColumn]));
                }
                set {
                    this[this.tableCatalog.Catalog_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AntMovieCatalog_Id {
                get {
                    try {
                        return ((int)(this[this.tableCatalog.AntMovieCatalog_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte AntMovieCatalog_Id in Tabelle Catalog ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatalog.AntMovieCatalog_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AntMovieCatalogRow AntMovieCatalogRow {
                get {
                    return ((AntMovieCatalogRow)(this.GetParentRow(this.Table.ParentRelations["AntMovieCatalog_Catalog"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AntMovieCatalog_Catalog"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAntMovieCatalog_IdNull() {
                return this.IsNull(this.tableCatalog.AntMovieCatalog_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAntMovieCatalog_IdNull() {
                this[this.tableCatalog.AntMovieCatalog_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertiesRow[] GetPropertiesRows() {
                if ((this.Table.ChildRelations["Catalog_Properties"] == null)) {
                    return new PropertiesRow[0];
                }
                else {
                    return ((PropertiesRow[])(base.GetChildRows(this.Table.ChildRelations["Catalog_Properties"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsPropertiesRow[] GetCustomFieldsPropertiesRows() {
                if ((this.Table.ChildRelations["Catalog_CustomFieldsProperties"] == null)) {
                    return new CustomFieldsPropertiesRow[0];
                }
                else {
                    return ((CustomFieldsPropertiesRow[])(base.GetChildRows(this.Table.ChildRelations["Catalog_CustomFieldsProperties"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRow[] GetContentsRows() {
                if ((this.Table.ChildRelations["Catalog_Contents"] == null)) {
                    return new ContentsRow[0];
                }
                else {
                    return ((ContentsRow[])(base.GetChildRows(this.Table.ChildRelations["Catalog_Contents"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PropertiesRow : global::System.Data.DataRow {
            
            private PropertiesDataTable tableProperties;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PropertiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProperties = ((PropertiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Owner {
                get {
                    try {
                        return ((string)(this[this.tableProperties.OwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Owner in Tabelle Properties ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperties.OwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mail {
                get {
                    try {
                        return ((string)(this[this.tableProperties.MailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Mail in Tabelle Properties ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperties.MailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Site {
                get {
                    try {
                        return ((string)(this[this.tableProperties.SiteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Site in Tabelle Properties ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperties.SiteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableProperties.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Description in Tabelle Properties ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperties.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Catalog_Id {
                get {
                    try {
                        return ((int)(this[this.tableProperties.Catalog_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Catalog_Id in Tabelle Properties ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProperties.Catalog_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRow CatalogRow {
                get {
                    return ((CatalogRow)(this.GetParentRow(this.Table.ParentRelations["Catalog_Properties"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Catalog_Properties"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNull() {
                return this.IsNull(this.tableProperties.OwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNull() {
                this[this.tableProperties.OwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMailNull() {
                return this.IsNull(this.tableProperties.MailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMailNull() {
                this[this.tableProperties.MailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteNull() {
                return this.IsNull(this.tableProperties.SiteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteNull() {
                this[this.tableProperties.SiteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableProperties.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableProperties.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCatalog_IdNull() {
                return this.IsNull(this.tableProperties.Catalog_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCatalog_IdNull() {
                this[this.tableProperties.Catalog_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomFieldsPropertiesRow : global::System.Data.DataRow {
            
            private CustomFieldsPropertiesDataTable tableCustomFieldsProperties;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomFieldsPropertiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomFieldsProperties = ((CustomFieldsPropertiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ColumnSettings {
                get {
                    try {
                        return ((string)(this[this.tableCustomFieldsProperties.ColumnSettingsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ColumnSettings in Tabelle CustomFieldsProperties ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomFieldsProperties.ColumnSettingsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GUIProperties {
                get {
                    try {
                        return ((string)(this[this.tableCustomFieldsProperties.GUIPropertiesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte GUIProperties in Tabelle CustomFieldsProperties ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomFieldsProperties.GUIPropertiesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OtherProperties {
                get {
                    try {
                        return ((string)(this[this.tableCustomFieldsProperties.OtherPropertiesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte OtherProperties in Tabelle CustomFieldsProperties ist DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCustomFieldsProperties.OtherPropertiesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomFieldsProperties_Id {
                get {
                    return ((int)(this[this.tableCustomFieldsProperties.CustomFieldsProperties_IdColumn]));
                }
                set {
                    this[this.tableCustomFieldsProperties.CustomFieldsProperties_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Catalog_Id {
                get {
                    try {
                        return ((int)(this[this.tableCustomFieldsProperties.Catalog_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Catalog_Id in Tabelle CustomFieldsProperties ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomFieldsProperties.Catalog_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRow CatalogRow {
                get {
                    return ((CatalogRow)(this.GetParentRow(this.Table.ParentRelations["Catalog_CustomFieldsProperties"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Catalog_CustomFieldsProperties"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumnSettingsNull() {
                return this.IsNull(this.tableCustomFieldsProperties.ColumnSettingsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumnSettingsNull() {
                this[this.tableCustomFieldsProperties.ColumnSettingsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGUIPropertiesNull() {
                return this.IsNull(this.tableCustomFieldsProperties.GUIPropertiesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGUIPropertiesNull() {
                this[this.tableCustomFieldsProperties.GUIPropertiesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherPropertiesNull() {
                return this.IsNull(this.tableCustomFieldsProperties.OtherPropertiesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherPropertiesNull() {
                this[this.tableCustomFieldsProperties.OtherPropertiesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCatalog_IdNull() {
                return this.IsNull(this.tableCustomFieldsProperties.Catalog_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCatalog_IdNull() {
                this[this.tableCustomFieldsProperties.Catalog_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldRow[] GetCustomFieldRows() {
                if ((this.Table.ChildRelations["CustomFieldsProperties_CustomField"] == null)) {
                    return new CustomFieldRow[0];
                }
                else {
                    return ((CustomFieldRow[])(base.GetChildRows(this.Table.ChildRelations["CustomFieldsProperties_CustomField"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomFieldRow : global::System.Data.DataRow {
            
            private CustomFieldDataTable tableCustomField;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomFieldRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomField = ((CustomFieldDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tag {
                get {
                    try {
                        return ((string)(this[this.tableCustomField.TagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Tag in Tabelle CustomField ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomField.TagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableCustomField.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Name in Tabelle CustomField ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomField.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableCustomField.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Type in Tabelle CustomField ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomField.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefaultValue {
                get {
                    try {
                        return ((string)(this[this.tableCustomField.DefaultValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DefaultValue in Tabelle CustomField ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomField.DefaultValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MultiValues {
                get {
                    try {
                        return ((string)(this[this.tableCustomField.MultiValuesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MultiValues in Tabelle CustomField ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomField.MultiValuesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExcludedInScripts {
                get {
                    try {
                        return ((string)(this[this.tableCustomField.ExcludedInScriptsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ExcludedInScripts in Tabelle CustomField ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomField.ExcludedInScriptsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GUIProperties {
                get {
                    try {
                        return ((string)(this[this.tableCustomField.GUIPropertiesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte GUIProperties in Tabelle CustomField ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomField.GUIPropertiesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OtherProperties {
                get {
                    try {
                        return ((string)(this[this.tableCustomField.OtherPropertiesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte OtherProperties in Tabelle CustomField ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomField.OtherPropertiesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomField_Id {
                get {
                    return ((int)(this[this.tableCustomField.CustomField_IdColumn]));
                }
                set {
                    this[this.tableCustomField.CustomField_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomFieldsProperties_Id {
                get {
                    try {
                        return ((int)(this[this.tableCustomField.CustomFieldsProperties_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte CustomFieldsProperties_Id in Tabelle CustomField ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomField.CustomFieldsProperties_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsPropertiesRow CustomFieldsPropertiesRow {
                get {
                    return ((CustomFieldsPropertiesRow)(this.GetParentRow(this.Table.ParentRelations["CustomFieldsProperties_CustomField"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CustomFieldsProperties_CustomField"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTagNull() {
                return this.IsNull(this.tableCustomField.TagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTagNull() {
                this[this.tableCustomField.TagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableCustomField.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableCustomField.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableCustomField.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableCustomField.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefaultValueNull() {
                return this.IsNull(this.tableCustomField.DefaultValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefaultValueNull() {
                this[this.tableCustomField.DefaultValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMultiValuesNull() {
                return this.IsNull(this.tableCustomField.MultiValuesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMultiValuesNull() {
                this[this.tableCustomField.MultiValuesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExcludedInScriptsNull() {
                return this.IsNull(this.tableCustomField.ExcludedInScriptsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExcludedInScriptsNull() {
                this[this.tableCustomField.ExcludedInScriptsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGUIPropertiesNull() {
                return this.IsNull(this.tableCustomField.GUIPropertiesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGUIPropertiesNull() {
                this[this.tableCustomField.GUIPropertiesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherPropertiesNull() {
                return this.IsNull(this.tableCustomField.OtherPropertiesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherPropertiesNull() {
                this[this.tableCustomField.OtherPropertiesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomFieldsProperties_IdNull() {
                return this.IsNull(this.tableCustomField.CustomFieldsProperties_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomFieldsProperties_IdNull() {
                this[this.tableCustomField.CustomFieldsProperties_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListItemRow[] GetListItemRows() {
                if ((this.Table.ChildRelations["CustomField_ListItem"] == null)) {
                    return new ListItemRow[0];
                }
                else {
                    return ((ListItemRow[])(base.GetChildRows(this.Table.ChildRelations["CustomField_ListItem"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListItemRow : global::System.Data.DataRow {
            
            private ListItemDataTable tableListItem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListItemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListItem = ((ListItemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text {
                get {
                    try {
                        return ((string)(this[this.tableListItem.TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Text in Tabelle ListItem ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableListItem.TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomField_Id {
                get {
                    try {
                        return ((int)(this[this.tableListItem.CustomField_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte CustomField_Id in Tabelle ListItem ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableListItem.CustomField_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldRow CustomFieldRow {
                get {
                    return ((CustomFieldRow)(this.GetParentRow(this.Table.ParentRelations["CustomField_ListItem"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CustomField_ListItem"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextNull() {
                return this.IsNull(this.tableListItem.TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextNull() {
                this[this.tableListItem.TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomField_IdNull() {
                return this.IsNull(this.tableListItem.CustomField_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomField_IdNull() {
                this[this.tableListItem.CustomField_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ContentsRow : global::System.Data.DataRow {
            
            private ContentsDataTable tableContents;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableContents = ((ContentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Contents_Id {
                get {
                    return ((int)(this[this.tableContents.Contents_IdColumn]));
                }
                set {
                    this[this.tableContents.Contents_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Catalog_Id {
                get {
                    try {
                        return ((int)(this[this.tableContents.Catalog_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Catalog_Id in Tabelle Contents ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableContents.Catalog_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRow CatalogRow {
                get {
                    return ((CatalogRow)(this.GetParentRow(this.Table.ParentRelations["Catalog_Contents"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Catalog_Contents"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCatalog_IdNull() {
                return this.IsNull(this.tableContents.Catalog_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCatalog_IdNull() {
                this[this.tableContents.Catalog_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRow[] GetMovieRows() {
                if ((this.Table.ChildRelations["Contents_Movie"] == null)) {
                    return new MovieRow[0];
                }
                else {
                    return ((MovieRow[])(base.GetChildRows(this.Table.ChildRelations["Contents_Movie"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MovieRow : global::System.Data.DataRow {
            
            private MovieDataTable tableMovie;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MovieRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMovie = ((MovieDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Number {
                get {
                    try {
                        return ((int)(this[this.tableMovie.NumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Number in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Checked {
                get {
                    try {
                        return ((string)(this[this.tableMovie.CheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Checked in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.CheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MediaLabel {
                get {
                    try {
                        return ((string)(this[this.tableMovie.MediaLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MediaLabel in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.MediaLabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MediaType {
                get {
                    try {
                        return ((string)(this[this.tableMovie.MediaTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MediaType in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.MediaTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableMovie.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Source in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Date {
                get {
                    try {
                        return ((string)(this[this.tableMovie.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Date in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Borrower {
                get {
                    try {
                        return ((string)(this[this.tableMovie.BorrowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Borrower in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.BorrowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rating {
                get {
                    try {
                        return ((decimal)(this[this.tableMovie.RatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Rating in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.RatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OriginalTitle {
                get {
                    try {
                        return ((string)(this[this.tableMovie.OriginalTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte OriginalTitle in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.OriginalTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TranslatedTitle {
                get {
                    try {
                        return ((string)(this[this.tableMovie.TranslatedTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TranslatedTitle in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.TranslatedTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormattedTitle {
                get {
                    try {
                        return ((string)(this[this.tableMovie.FormattedTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte FormattedTitle in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.FormattedTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Director {
                get {
                    try {
                        return ((string)(this[this.tableMovie.DirectorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Director in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.DirectorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Producer {
                get {
                    try {
                        return ((string)(this[this.tableMovie.ProducerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Producer in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.ProducerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableMovie.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Country in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableMovie.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Category in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Year {
                get {
                    try {
                        return ((string)(this[this.tableMovie.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Year in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Length {
                get {
                    try {
                        return ((string)(this[this.tableMovie.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Length in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Actors {
                get {
                    try {
                        return ((string)(this[this.tableMovie.ActorsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Actors in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.ActorsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string URL {
                get {
                    try {
                        return ((string)(this[this.tableMovie.URLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte URL in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.URLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableMovie.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Description in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableMovie.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Comments in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoFormat {
                get {
                    try {
                        return ((string)(this[this.tableMovie.VideoFormatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte VideoFormat in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.VideoFormatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoBitrate {
                get {
                    try {
                        return ((string)(this[this.tableMovie.VideoBitrateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte VideoBitrate in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.VideoBitrateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AudioFormat {
                get {
                    try {
                        return ((string)(this[this.tableMovie.AudioFormatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte AudioFormat in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.AudioFormatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AudioBitrate {
                get {
                    try {
                        return ((string)(this[this.tableMovie.AudioBitrateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte AudioBitrate in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.AudioBitrateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Resolution {
                get {
                    try {
                        return ((string)(this[this.tableMovie.ResolutionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Resolution in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.ResolutionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Framerate {
                get {
                    try {
                        return ((string)(this[this.tableMovie.FramerateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Framerate in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.FramerateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Languages {
                get {
                    try {
                        return ((string)(this[this.tableMovie.LanguagesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Languages in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.LanguagesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subtitles {
                get {
                    try {
                        return ((string)(this[this.tableMovie.SubtitlesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Subtitles in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.SubtitlesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tableMovie.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Size in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Disks {
                get {
                    try {
                        return ((string)(this[this.tableMovie.DisksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Disks in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.DisksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Picture {
                get {
                    try {
                        return ((string)(this[this.tableMovie.PictureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Picture in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.PictureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateAdded {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMovie.DateAddedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DateAdded in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.DateAddedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Length_Num {
                get {
                    try {
                        return ((int)(this[this.tableMovie.Length_NumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Length_Num in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.Length_NumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fanart {
                get {
                    try {
                        return ((string)(this[this.tableMovie.FanartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Fanart in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.FanartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Certification {
                get {
                    try {
                        return ((string)(this[this.tableMovie.CertificationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Certification in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.CertificationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Writer {
                get {
                    try {
                        return ((string)(this[this.tableMovie.WriterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Writer in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.WriterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Watched {
                get {
                    try {
                        return ((string)(this[this.tableMovie.WatchedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Watched in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.WatchedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateWatched {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMovie.DateWatchedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DateWatched in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.DateWatchedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IMDB_Id {
                get {
                    try {
                        return ((string)(this[this.tableMovie.IMDB_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte IMDB_Id in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.IMDB_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TMDB_Id {
                get {
                    try {
                        return ((string)(this[this.tableMovie.TMDB_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TMDB_Id in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.TMDB_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceTrailer {
                get {
                    try {
                        return ((string)(this[this.tableMovie.SourceTrailerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SourceTrailer in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.SourceTrailerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TagLine {
                get {
                    try {
                        return ((string)(this[this.tableMovie.TagLineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TagLine in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.TagLineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tags {
                get {
                    try {
                        return ((string)(this[this.tableMovie.TagsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Tags in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.TagsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Studio {
                get {
                    try {
                        return ((string)(this[this.tableMovie.StudioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Studio in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.StudioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IMDB_Rank {
                get {
                    try {
                        return ((string)(this[this.tableMovie.IMDB_RankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte IMDB_Rank in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.IMDB_RankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsOnline {
                get {
                    try {
                        return ((string)(this[this.tableMovie.IsOnlineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte IsOnline in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.IsOnlineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsOnlineTrailer {
                get {
                    try {
                        return ((string)(this[this.tableMovie.IsOnlineTrailerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte IsOnlineTrailer in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.IsOnlineTrailerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Aspectratio {
                get {
                    try {
                        return ((string)(this[this.tableMovie.AspectratioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Aspectratio in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.AspectratioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RatingUser {
                get {
                    try {
                        return ((decimal)(this[this.tableMovie.RatingUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte RatingUser in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.RatingUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Edition {
                get {
                    try {
                        return ((string)(this[this.tableMovie.EditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Edition in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.EditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Movie_Id {
                get {
                    return ((int)(this[this.tableMovie.Movie_IdColumn]));
                }
                set {
                    this[this.tableMovie.Movie_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Contents_Id {
                get {
                    try {
                        return ((int)(this[this.tableMovie.Contents_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Contents_Id in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.Contents_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRow ContentsRow {
                get {
                    return ((ContentsRow)(this.GetParentRow(this.Table.ParentRelations["Contents_Movie"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Contents_Movie"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableMovie.NumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableMovie.NumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckedNull() {
                return this.IsNull(this.tableMovie.CheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckedNull() {
                this[this.tableMovie.CheckedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaLabelNull() {
                return this.IsNull(this.tableMovie.MediaLabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaLabelNull() {
                this[this.tableMovie.MediaLabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaTypeNull() {
                return this.IsNull(this.tableMovie.MediaTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaTypeNull() {
                this[this.tableMovie.MediaTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tableMovie.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tableMovie.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableMovie.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableMovie.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBorrowerNull() {
                return this.IsNull(this.tableMovie.BorrowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBorrowerNull() {
                this[this.tableMovie.BorrowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatingNull() {
                return this.IsNull(this.tableMovie.RatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatingNull() {
                this[this.tableMovie.RatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalTitleNull() {
                return this.IsNull(this.tableMovie.OriginalTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalTitleNull() {
                this[this.tableMovie.OriginalTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTranslatedTitleNull() {
                return this.IsNull(this.tableMovie.TranslatedTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTranslatedTitleNull() {
                this[this.tableMovie.TranslatedTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormattedTitleNull() {
                return this.IsNull(this.tableMovie.FormattedTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormattedTitleNull() {
                this[this.tableMovie.FormattedTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDirectorNull() {
                return this.IsNull(this.tableMovie.DirectorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDirectorNull() {
                this[this.tableMovie.DirectorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProducerNull() {
                return this.IsNull(this.tableMovie.ProducerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProducerNull() {
                this[this.tableMovie.ProducerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tableMovie.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tableMovie.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableMovie.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableMovie.CategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableMovie.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableMovie.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableMovie.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableMovie.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActorsNull() {
                return this.IsNull(this.tableMovie.ActorsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActorsNull() {
                this[this.tableMovie.ActorsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsURLNull() {
                return this.IsNull(this.tableMovie.URLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetURLNull() {
                this[this.tableMovie.URLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableMovie.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableMovie.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableMovie.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableMovie.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoFormatNull() {
                return this.IsNull(this.tableMovie.VideoFormatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoFormatNull() {
                this[this.tableMovie.VideoFormatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoBitrateNull() {
                return this.IsNull(this.tableMovie.VideoBitrateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoBitrateNull() {
                this[this.tableMovie.VideoBitrateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAudioFormatNull() {
                return this.IsNull(this.tableMovie.AudioFormatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAudioFormatNull() {
                this[this.tableMovie.AudioFormatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAudioBitrateNull() {
                return this.IsNull(this.tableMovie.AudioBitrateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAudioBitrateNull() {
                this[this.tableMovie.AudioBitrateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResolutionNull() {
                return this.IsNull(this.tableMovie.ResolutionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResolutionNull() {
                this[this.tableMovie.ResolutionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFramerateNull() {
                return this.IsNull(this.tableMovie.FramerateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFramerateNull() {
                this[this.tableMovie.FramerateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLanguagesNull() {
                return this.IsNull(this.tableMovie.LanguagesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLanguagesNull() {
                this[this.tableMovie.LanguagesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubtitlesNull() {
                return this.IsNull(this.tableMovie.SubtitlesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubtitlesNull() {
                this[this.tableMovie.SubtitlesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableMovie.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableMovie.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisksNull() {
                return this.IsNull(this.tableMovie.DisksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisksNull() {
                this[this.tableMovie.DisksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPictureNull() {
                return this.IsNull(this.tableMovie.PictureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPictureNull() {
                this[this.tableMovie.PictureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateAddedNull() {
                return this.IsNull(this.tableMovie.DateAddedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateAddedNull() {
                this[this.tableMovie.DateAddedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLength_NumNull() {
                return this.IsNull(this.tableMovie.Length_NumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLength_NumNull() {
                this[this.tableMovie.Length_NumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFanartNull() {
                return this.IsNull(this.tableMovie.FanartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFanartNull() {
                this[this.tableMovie.FanartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCertificationNull() {
                return this.IsNull(this.tableMovie.CertificationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCertificationNull() {
                this[this.tableMovie.CertificationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWriterNull() {
                return this.IsNull(this.tableMovie.WriterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWriterNull() {
                this[this.tableMovie.WriterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWatchedNull() {
                return this.IsNull(this.tableMovie.WatchedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWatchedNull() {
                this[this.tableMovie.WatchedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateWatchedNull() {
                return this.IsNull(this.tableMovie.DateWatchedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateWatchedNull() {
                this[this.tableMovie.DateWatchedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIMDB_IdNull() {
                return this.IsNull(this.tableMovie.IMDB_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIMDB_IdNull() {
                this[this.tableMovie.IMDB_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTMDB_IdNull() {
                return this.IsNull(this.tableMovie.TMDB_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTMDB_IdNull() {
                this[this.tableMovie.TMDB_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceTrailerNull() {
                return this.IsNull(this.tableMovie.SourceTrailerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceTrailerNull() {
                this[this.tableMovie.SourceTrailerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTagLineNull() {
                return this.IsNull(this.tableMovie.TagLineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTagLineNull() {
                this[this.tableMovie.TagLineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTagsNull() {
                return this.IsNull(this.tableMovie.TagsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTagsNull() {
                this[this.tableMovie.TagsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudioNull() {
                return this.IsNull(this.tableMovie.StudioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudioNull() {
                this[this.tableMovie.StudioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIMDB_RankNull() {
                return this.IsNull(this.tableMovie.IMDB_RankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIMDB_RankNull() {
                this[this.tableMovie.IMDB_RankColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOnlineNull() {
                return this.IsNull(this.tableMovie.IsOnlineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOnlineNull() {
                this[this.tableMovie.IsOnlineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOnlineTrailerNull() {
                return this.IsNull(this.tableMovie.IsOnlineTrailerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOnlineTrailerNull() {
                this[this.tableMovie.IsOnlineTrailerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAspectratioNull() {
                return this.IsNull(this.tableMovie.AspectratioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAspectratioNull() {
                this[this.tableMovie.AspectratioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatingUserNull() {
                return this.IsNull(this.tableMovie.RatingUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatingUserNull() {
                this[this.tableMovie.RatingUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEditionNull() {
                return this.IsNull(this.tableMovie.EditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEditionNull() {
                this[this.tableMovie.EditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContents_IdNull() {
                return this.IsNull(this.tableMovie.Contents_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContents_IdNull() {
                this[this.tableMovie.Contents_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsRow[] GetCustomFieldsRows() {
                if ((this.Table.ChildRelations["Movie_CustomFields"] == null)) {
                    return new CustomFieldsRow[0];
                }
                else {
                    return ((CustomFieldsRow[])(base.GetChildRows(this.Table.ChildRelations["Movie_CustomFields"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomFieldsRow : global::System.Data.DataRow {
            
            private CustomFieldsDataTable tableCustomFields;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomFieldsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomFields = ((CustomFieldsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Writer_Extended {
                get {
                    try {
                        return ((string)(this[this.tableCustomFields._Writer_ExtendedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Writer-Extended in Tabelle CustomFields ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomFields._Writer_ExtendedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Certification_Extended {
                get {
                    try {
                        return ((string)(this[this.tableCustomFields._Certification_ExtendedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Certification-Extended in Tabelle CustomFields ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomFields._Certification_ExtendedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Test1 {
                get {
                    try {
                        return ((string)(this[this.tableCustomFields.Test1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Test1 in Tabelle CustomFields ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomFields.Test1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Test2 {
                get {
                    try {
                        return ((string)(this[this.tableCustomFields.Test2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Test2 in Tabelle CustomFields ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomFields.Test2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Movie_Id {
                get {
                    try {
                        return ((int)(this[this.tableCustomFields.Movie_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Movie_Id in Tabelle CustomFields ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomFields.Movie_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRow MovieRow {
                get {
                    return ((MovieRow)(this.GetParentRow(this.Table.ParentRelations["Movie_CustomFields"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Movie_CustomFields"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Writer_ExtendedNull() {
                return this.IsNull(this.tableCustomFields._Writer_ExtendedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Writer_ExtendedNull() {
                this[this.tableCustomFields._Writer_ExtendedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Certification_ExtendedNull() {
                return this.IsNull(this.tableCustomFields._Certification_ExtendedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Certification_ExtendedNull() {
                this[this.tableCustomFields._Certification_ExtendedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTest1Null() {
                return this.IsNull(this.tableCustomFields.Test1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTest1Null() {
                this[this.tableCustomFields.Test1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTest2Null() {
                return this.IsNull(this.tableCustomFields.Test2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTest2Null() {
                this[this.tableCustomFields.Test2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMovie_IdNull() {
                return this.IsNull(this.tableCustomFields.Movie_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMovie_IdNull() {
                this[this.tableCustomFields.Movie_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PersonsRow : global::System.Data.DataRow {
            
            private PersonsDataTable tablePersons;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PersonsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePersons = ((PersonsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Persons_Id {
                get {
                    return ((int)(this[this.tablePersons.Persons_IdColumn]));
                }
                set {
                    this[this.tablePersons.Persons_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AntMovieCatalog_Id {
                get {
                    try {
                        return ((int)(this[this.tablePersons.AntMovieCatalog_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte AntMovieCatalog_Id in Tabelle Persons ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePersons.AntMovieCatalog_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AntMovieCatalogRow AntMovieCatalogRow {
                get {
                    return ((AntMovieCatalogRow)(this.GetParentRow(this.Table.ParentRelations["AntMovieCatalog_Persons"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AntMovieCatalog_Persons"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAntMovieCatalog_IdNull() {
                return this.IsNull(this.tablePersons.AntMovieCatalog_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAntMovieCatalog_IdNull() {
                this[this.tablePersons.AntMovieCatalog_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonRow[] GetPersonRows() {
                if ((this.Table.ChildRelations["Persons_Person"] == null)) {
                    return new PersonRow[0];
                }
                else {
                    return ((PersonRow[])(base.GetChildRows(this.Table.ChildRelations["Persons_Person"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PersonRow : global::System.Data.DataRow {
            
            private PersonDataTable tablePerson;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PersonRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePerson = ((PersonDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tablePerson.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Name in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AlternateName {
                get {
                    try {
                        return ((string)(this[this.tablePerson.AlternateNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte AlternateName in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.AlternateNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Born {
                get {
                    try {
                        return ((string)(this[this.tablePerson.BornColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Born in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.BornColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BirthPlace {
                get {
                    try {
                        return ((string)(this[this.tablePerson.BirthPlaceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte BirthPlace in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.BirthPlaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MiniBiography {
                get {
                    try {
                        return ((string)(this[this.tablePerson.MiniBiographyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MiniBiography in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.MiniBiographyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Biography {
                get {
                    try {
                        return ((string)(this[this.tablePerson.BiographyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Biography in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.BiographyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string URL {
                get {
                    try {
                        return ((string)(this[this.tablePerson.URLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte URL in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.URLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IMDB_Id {
                get {
                    try {
                        return ((string)(this[this.tablePerson.IMDB_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte IMDB_Id in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.IMDB_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TMDB_Id {
                get {
                    try {
                        return ((string)(this[this.tablePerson.TMDB_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TMDB_Id in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.TMDB_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActor {
                get {
                    try {
                        return ((bool)(this[this.tablePerson.IsActorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte IsActor in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.IsActorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProducer {
                get {
                    try {
                        return ((bool)(this[this.tablePerson.IsProducerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte IsProducer in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.IsProducerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDirector {
                get {
                    try {
                        return ((bool)(this[this.tablePerson.IsDirectorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte IsDirector in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.IsDirectorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWriter {
                get {
                    try {
                        return ((bool)(this[this.tablePerson.IsWriterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte IsWriter in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.IsWriterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Photos {
                get {
                    try {
                        return ((string)(this[this.tablePerson.PhotosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Photos in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.PhotosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Picture {
                get {
                    try {
                        return ((string)(this[this.tablePerson.PictureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Picture in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.PictureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Persons_Id {
                get {
                    try {
                        return ((int)(this[this.tablePerson.Persons_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Persons_Id in Tabelle Person ist DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.Persons_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonsRow PersonsRow {
                get {
                    return ((PersonsRow)(this.GetParentRow(this.Table.ParentRelations["Persons_Person"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Persons_Person"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tablePerson.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tablePerson.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAlternateNameNull() {
                return this.IsNull(this.tablePerson.AlternateNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAlternateNameNull() {
                this[this.tablePerson.AlternateNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBornNull() {
                return this.IsNull(this.tablePerson.BornColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBornNull() {
                this[this.tablePerson.BornColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBirthPlaceNull() {
                return this.IsNull(this.tablePerson.BirthPlaceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBirthPlaceNull() {
                this[this.tablePerson.BirthPlaceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiniBiographyNull() {
                return this.IsNull(this.tablePerson.MiniBiographyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiniBiographyNull() {
                this[this.tablePerson.MiniBiographyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBiographyNull() {
                return this.IsNull(this.tablePerson.BiographyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBiographyNull() {
                this[this.tablePerson.BiographyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsURLNull() {
                return this.IsNull(this.tablePerson.URLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetURLNull() {
                this[this.tablePerson.URLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIMDB_IdNull() {
                return this.IsNull(this.tablePerson.IMDB_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIMDB_IdNull() {
                this[this.tablePerson.IMDB_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTMDB_IdNull() {
                return this.IsNull(this.tablePerson.TMDB_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTMDB_IdNull() {
                this[this.tablePerson.TMDB_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActorNull() {
                return this.IsNull(this.tablePerson.IsActorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActorNull() {
                this[this.tablePerson.IsActorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsProducerNull() {
                return this.IsNull(this.tablePerson.IsProducerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsProducerNull() {
                this[this.tablePerson.IsProducerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDirectorNull() {
                return this.IsNull(this.tablePerson.IsDirectorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDirectorNull() {
                this[this.tablePerson.IsDirectorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsWriterNull() {
                return this.IsNull(this.tablePerson.IsWriterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsWriterNull() {
                this[this.tablePerson.IsWriterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhotosNull() {
                return this.IsNull(this.tablePerson.PhotosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhotosNull() {
                this[this.tablePerson.PhotosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPictureNull() {
                return this.IsNull(this.tablePerson.PictureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPictureNull() {
                this[this.tablePerson.PictureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersons_IdNull() {
                return this.IsNull(this.tablePerson.Persons_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersons_IdNull() {
                this[this.tablePerson.Persons_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MyFilmsSettingsRow : global::System.Data.DataRow {
            
            private MyFilmsSettingsDataTable tableMyFilmsSettings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MyFilmsSettingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMyFilmsSettings = ((MyFilmsSettingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MyFilmsSettings_Id {
                get {
                    return ((int)(this[this.tableMyFilmsSettings.MyFilmsSettings_IdColumn]));
                }
                set {
                    this[this.tableMyFilmsSettings.MyFilmsSettings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AntMovieCatalog_Id {
                get {
                    try {
                        return ((int)(this[this.tableMyFilmsSettings.AntMovieCatalog_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte AntMovieCatalog_Id in Tabelle MyFilmsSettings ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMyFilmsSettings.AntMovieCatalog_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AntMovieCatalogRow AntMovieCatalogRow {
                get {
                    return ((AntMovieCatalogRow)(this.GetParentRow(this.Table.ParentRelations["AntMovieCatalog_MyFilmsSettings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AntMovieCatalog_MyFilmsSettings"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAntMovieCatalog_IdNull() {
                return this.IsNull(this.tableMyFilmsSettings.AntMovieCatalog_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAntMovieCatalog_IdNull() {
                this[this.tableMyFilmsSettings.AntMovieCatalog_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow[] GetUsersRows() {
                if ((this.Table.ChildRelations["MyFilmsSettings_Users"] == null)) {
                    return new UsersRow[0];
                }
                else {
                    return ((UsersRow[])(base.GetChildRows(this.Table.ChildRelations["MyFilmsSettings_Users"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UsersRow : global::System.Data.DataRow {
            
            private UsersDataTable tableUsers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Users_Id {
                get {
                    return ((int)(this[this.tableUsers.Users_IdColumn]));
                }
                set {
                    this[this.tableUsers.Users_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MyFilmsSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableUsers.MyFilmsSettings_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MyFilmsSettings_Id in Tabelle Users ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.MyFilmsSettings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyFilmsSettingsRow MyFilmsSettingsRow {
                get {
                    return ((MyFilmsSettingsRow)(this.GetParentRow(this.Table.ParentRelations["MyFilmsSettings_Users"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MyFilmsSettings_Users"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMyFilmsSettings_IdNull() {
                return this.IsNull(this.tableUsers.MyFilmsSettings_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMyFilmsSettings_IdNull() {
                this[this.tableUsers.MyFilmsSettings_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow[] GetUserRows() {
                if ((this.Table.ChildRelations["Users_User"] == null)) {
                    return new UserRow[0];
                }
                else {
                    return ((UserRow[])(base.GetChildRows(this.Table.ChildRelations["Users_User"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserRow : global::System.Data.DataRow {
            
            private UserDataTable tableUser;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUser = ((UserDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableUser.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Name in Tabelle User ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Alias {
                get {
                    try {
                        return ((string)(this[this.tableUser.AliasColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Alias in Tabelle User ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.AliasColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraktName {
                get {
                    try {
                        return ((string)(this[this.tableUser.TraktNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TraktName in Tabelle User ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.TraktNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Age {
                get {
                    try {
                        return ((string)(this[this.tableUser.AgeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Age in Tabelle User ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.AgeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Users_Id {
                get {
                    try {
                        return ((int)(this[this.tableUser.Users_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Users_Id in Tabelle User ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.Users_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow UsersRow {
                get {
                    return ((UsersRow)(this.GetParentRow(this.Table.ParentRelations["Users_User"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Users_User"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableUser.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableUser.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAliasNull() {
                return this.IsNull(this.tableUser.AliasColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAliasNull() {
                this[this.tableUser.AliasColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraktNameNull() {
                return this.IsNull(this.tableUser.TraktNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraktNameNull() {
                this[this.tableUser.TraktNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgeNull() {
                return this.IsNull(this.tableUser.AgeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgeNull() {
                this[this.tableUser.AgeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsers_IdNull() {
                return this.IsNull(this.tableUser.Users_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsers_IdNull() {
                this[this.tableUser.Users_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HistoryRow : global::System.Data.DataRow {
            
            private HistoryDataTable tableHistory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HistoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHistory = ((HistoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int History_Id {
                get {
                    return ((int)(this[this.tableHistory.History_IdColumn]));
                }
                set {
                    this[this.tableHistory.History_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AntMovieCatalog_Id {
                get {
                    try {
                        return ((int)(this[this.tableHistory.AntMovieCatalog_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte AntMovieCatalog_Id in Tabelle History ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableHistory.AntMovieCatalog_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AntMovieCatalogRow AntMovieCatalogRow {
                get {
                    return ((AntMovieCatalogRow)(this.GetParentRow(this.Table.ParentRelations["AntMovieCatalog_History"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AntMovieCatalog_History"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAntMovieCatalog_IdNull() {
                return this.IsNull(this.tableHistory.AntMovieCatalog_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAntMovieCatalog_IdNull() {
                this[this.tableHistory.AntMovieCatalog_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchedRow[] GetWatchedRows() {
                if ((this.Table.ChildRelations["History_Watched"] == null)) {
                    return new WatchedRow[0];
                }
                else {
                    return ((WatchedRow[])(base.GetChildRows(this.Table.ChildRelations["History_Watched"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WatchedRowChangeEvent : global::System.EventArgs {
            
            private WatchedRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchedRowChangeEvent(WatchedRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WatchedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AntMovieCatalogRowChangeEvent : global::System.EventArgs {
            
            private AntMovieCatalogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AntMovieCatalogRowChangeEvent(AntMovieCatalogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AntMovieCatalogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CatalogRowChangeEvent : global::System.EventArgs {
            
            private CatalogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRowChangeEvent(CatalogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PropertiesRowChangeEvent : global::System.EventArgs {
            
            private PropertiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertiesRowChangeEvent(PropertiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomFieldsPropertiesRowChangeEvent : global::System.EventArgs {
            
            private CustomFieldsPropertiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsPropertiesRowChangeEvent(CustomFieldsPropertiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsPropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomFieldRowChangeEvent : global::System.EventArgs {
            
            private CustomFieldRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldRowChangeEvent(CustomFieldRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListItemRowChangeEvent : global::System.EventArgs {
            
            private ListItemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListItemRowChangeEvent(ListItemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ContentsRowChangeEvent : global::System.EventArgs {
            
            private ContentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRowChangeEvent(ContentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MovieRowChangeEvent : global::System.EventArgs {
            
            private MovieRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRowChangeEvent(MovieRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomFieldsRowChangeEvent : global::System.EventArgs {
            
            private CustomFieldsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsRowChangeEvent(CustomFieldsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomFieldsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PersonsRowChangeEvent : global::System.EventArgs {
            
            private PersonsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonsRowChangeEvent(PersonsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PersonRowChangeEvent : global::System.EventArgs {
            
            private PersonRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonRowChangeEvent(PersonRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PersonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MyFilmsSettingsRowChangeEvent : global::System.EventArgs {
            
            private MyFilmsSettingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyFilmsSettingsRowChangeEvent(MyFilmsSettingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyFilmsSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UsersRowChangeEvent : global::System.EventArgs {
            
            private UsersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRowChangeEvent(UsersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserRowChangeEvent : global::System.EventArgs {
            
            private UserRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRowChangeEvent(UserRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HistoryRowChangeEvent : global::System.EventArgs {
            
            private HistoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryRowChangeEvent(HistoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.3615
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MyFilmsPlugin.MyFilms {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AntMovieCatalog")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AntMovieCatalog : global::System.Data.DataSet {
        
        private CatalogDataTable tableCatalog;
        
        private ContentsDataTable tableContents;
        
        private MovieDataTable tableMovie;
        
        private global::System.Data.DataRelation relationCatalog_Contents;
        
        private global::System.Data.DataRelation relationContents_Movie;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AntMovieCatalog() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AntMovieCatalog(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.ExcludeSchema)) {
                    this.InitExpressions();
                }
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Catalog"] != null)) {
                    base.Tables.Add(new CatalogDataTable(ds.Tables["Catalog"]));
                }
                if ((ds.Tables["Contents"] != null)) {
                    base.Tables.Add(new ContentsDataTable(ds.Tables["Contents"]));
                }
                if ((ds.Tables["Movie"] != null)) {
                    base.Tables.Add(new MovieDataTable(ds.Tables["Movie"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                this.InitExpressions();
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CatalogDataTable Catalog {
            get {
                return this.tableCatalog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ContentsDataTable Contents {
            get {
                return this.tableContents;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MovieDataTable Movie {
            get {
                return this.tableMovie;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            AntMovieCatalog cln = ((AntMovieCatalog)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Catalog"] != null)) {
                    base.Tables.Add(new CatalogDataTable(ds.Tables["Catalog"]));
                }
                if ((ds.Tables["Contents"] != null)) {
                    base.Tables.Add(new ContentsDataTable(ds.Tables["Contents"]));
                }
                if ((ds.Tables["Movie"] != null)) {
                    base.Tables.Add(new MovieDataTable(ds.Tables["Movie"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCatalog = ((CatalogDataTable)(base.Tables["Catalog"]));
            if ((initTable == true)) {
                if ((this.tableCatalog != null)) {
                    this.tableCatalog.InitVars();
                }
            }
            this.tableContents = ((ContentsDataTable)(base.Tables["Contents"]));
            if ((initTable == true)) {
                if ((this.tableContents != null)) {
                    this.tableContents.InitVars();
                }
            }
            this.tableMovie = ((MovieDataTable)(base.Tables["Movie"]));
            if ((initTable == true)) {
                if ((this.tableMovie != null)) {
                    this.tableMovie.InitVars();
                }
            }
            this.relationCatalog_Contents = this.Relations["Catalog_Contents"];
            this.relationContents_Movie = this.Relations["Contents_Movie"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AntMovieCatalog";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCatalog = new CatalogDataTable();
            base.Tables.Add(this.tableCatalog);
            this.tableContents = new ContentsDataTable();
            base.Tables.Add(this.tableContents);
            this.tableMovie = new MovieDataTable(false);
            base.Tables.Add(this.tableMovie);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("Catalog_Contents", new global::System.Data.DataColumn[] {
                        this.tableCatalog.Catalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableContents.Catalog_IdColumn});
            this.tableContents.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Contents_Movie", new global::System.Data.DataColumn[] {
                        this.tableContents.Contents_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMovie.Contents_IdColumn});
            this.tableMovie.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationCatalog_Contents = new global::System.Data.DataRelation("Catalog_Contents", new global::System.Data.DataColumn[] {
                        this.tableCatalog.Catalog_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableContents.Catalog_IdColumn}, false);
            this.relationCatalog_Contents.Nested = true;
            this.Relations.Add(this.relationCatalog_Contents);
            this.relationContents_Movie = new global::System.Data.DataRelation("Contents_Movie", new global::System.Data.DataColumn[] {
                        this.tableContents.Contents_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMovie.Contents_IdColumn}, false);
            this.relationContents_Movie.Nested = true;
            this.Relations.Add(this.relationContents_Movie);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCatalog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeContents() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMovie() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AntMovieCatalog ds = new AntMovieCatalog();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.Movie.DateAddedColumn.Expression = "Convert(Date,\'System.DateTime\')";
            this.Movie.Length_NumColumn.Expression = "Convert(Length,\'System.Int32\')";
        }
        
        public delegate void CatalogRowChangeEventHandler(object sender, CatalogRowChangeEvent e);
        
        public delegate void ContentsRowChangeEventHandler(object sender, ContentsRowChangeEvent e);
        
        public delegate void MovieRowChangeEventHandler(object sender, MovieRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CatalogDataTable : global::System.Data.TypedTableBase<CatalogRow> {
            
            private global::System.Data.DataColumn columnAntMovieCatalog_Id;
            
            private global::System.Data.DataColumn columnProperties;
            
            private global::System.Data.DataColumn columnCatalog_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogDataTable() {
                this.TableName = "Catalog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CatalogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CatalogDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AntMovieCatalog_IdColumn {
                get {
                    return this.columnAntMovieCatalog_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertiesColumn {
                get {
                    return this.columnProperties;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Catalog_IdColumn {
                get {
                    return this.columnCatalog_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRow this[int index] {
                get {
                    return ((CatalogRow)(this.Rows[index]));
                }
            }
            
            public event CatalogRowChangeEventHandler CatalogRowChanging;
            
            public event CatalogRowChangeEventHandler CatalogRowChanged;
            
            public event CatalogRowChangeEventHandler CatalogRowDeleting;
            
            public event CatalogRowChangeEventHandler CatalogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCatalogRow(CatalogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRow AddCatalogRow(int AntMovieCatalog_Id, string Properties) {
                CatalogRow rowCatalogRow = ((CatalogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AntMovieCatalog_Id,
                        Properties,
                        null};
                rowCatalogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCatalogRow);
                return rowCatalogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CatalogDataTable cln = ((CatalogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CatalogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAntMovieCatalog_Id = base.Columns["AntMovieCatalog_Id"];
                this.columnProperties = base.Columns["Properties"];
                this.columnCatalog_Id = base.Columns["Catalog_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAntMovieCatalog_Id = new global::System.Data.DataColumn("AntMovieCatalog_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAntMovieCatalog_Id);
                this.columnProperties = new global::System.Data.DataColumn("Properties", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProperties);
                this.columnCatalog_Id = new global::System.Data.DataColumn("Catalog_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCatalog_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCatalog_Id}, true));
                this.columnAntMovieCatalog_Id.Namespace = "";
                this.columnCatalog_Id.AutoIncrement = true;
                this.columnCatalog_Id.AllowDBNull = false;
                this.columnCatalog_Id.Unique = true;
                this.columnCatalog_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRow NewCatalogRow() {
                return ((CatalogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CatalogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CatalogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CatalogRowChanged != null)) {
                    this.CatalogRowChanged(this, new CatalogRowChangeEvent(((CatalogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CatalogRowChanging != null)) {
                    this.CatalogRowChanging(this, new CatalogRowChangeEvent(((CatalogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CatalogRowDeleted != null)) {
                    this.CatalogRowDeleted(this, new CatalogRowChangeEvent(((CatalogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CatalogRowDeleting != null)) {
                    this.CatalogRowDeleting(this, new CatalogRowChangeEvent(((CatalogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCatalogRow(CatalogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AntMovieCatalog ds = new AntMovieCatalog();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CatalogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ContentsDataTable : global::System.Data.TypedTableBase<ContentsRow> {
            
            private global::System.Data.DataColumn columnContents_Id;
            
            private global::System.Data.DataColumn columnCatalog_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsDataTable() {
                this.TableName = "Contents";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ContentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Contents_IdColumn {
                get {
                    return this.columnContents_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Catalog_IdColumn {
                get {
                    return this.columnCatalog_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRow this[int index] {
                get {
                    return ((ContentsRow)(this.Rows[index]));
                }
            }
            
            public event ContentsRowChangeEventHandler ContentsRowChanging;
            
            public event ContentsRowChangeEventHandler ContentsRowChanged;
            
            public event ContentsRowChangeEventHandler ContentsRowDeleting;
            
            public event ContentsRowChangeEventHandler ContentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddContentsRow(ContentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRow AddContentsRow(CatalogRow parentCatalogRowByCatalog_Contents) {
                ContentsRow rowContentsRow = ((ContentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentCatalogRowByCatalog_Contents != null)) {
                    columnValuesArray[1] = parentCatalogRowByCatalog_Contents[2];
                }
                rowContentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowContentsRow);
                return rowContentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ContentsDataTable cln = ((ContentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ContentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContents_Id = base.Columns["Contents_Id"];
                this.columnCatalog_Id = base.Columns["Catalog_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContents_Id = new global::System.Data.DataColumn("Contents_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnContents_Id);
                this.columnCatalog_Id = new global::System.Data.DataColumn("Catalog_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCatalog_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnContents_Id}, true));
                this.columnContents_Id.AutoIncrement = true;
                this.columnContents_Id.AllowDBNull = false;
                this.columnContents_Id.Unique = true;
                this.columnContents_Id.Namespace = "";
                this.columnCatalog_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRow NewContentsRow() {
                return ((ContentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ContentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ContentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ContentsRowChanged != null)) {
                    this.ContentsRowChanged(this, new ContentsRowChangeEvent(((ContentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ContentsRowChanging != null)) {
                    this.ContentsRowChanging(this, new ContentsRowChangeEvent(((ContentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ContentsRowDeleted != null)) {
                    this.ContentsRowDeleted(this, new ContentsRowChangeEvent(((ContentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ContentsRowDeleting != null)) {
                    this.ContentsRowDeleting(this, new ContentsRowChangeEvent(((ContentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveContentsRow(ContentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AntMovieCatalog ds = new AntMovieCatalog();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ContentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MovieDataTable : global::System.Data.TypedTableBase<MovieRow> {
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnChecked;
            
            private global::System.Data.DataColumn columnMediaLabel;
            
            private global::System.Data.DataColumn columnMediaType;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnBorrower;
            
            private global::System.Data.DataColumn columnRating;
            
            private global::System.Data.DataColumn columnOriginalTitle;
            
            private global::System.Data.DataColumn columnTranslatedTitle;
            
            private global::System.Data.DataColumn columnFormattedTitle;
            
            private global::System.Data.DataColumn columnDirector;
            
            private global::System.Data.DataColumn columnProducer;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnActors;
            
            private global::System.Data.DataColumn columnURL;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnVideoFormat;
            
            private global::System.Data.DataColumn columnVideoBitrate;
            
            private global::System.Data.DataColumn columnAudioFormat;
            
            private global::System.Data.DataColumn columnAudioBitrate;
            
            private global::System.Data.DataColumn columnResolution;
            
            private global::System.Data.DataColumn columnFramerate;
            
            private global::System.Data.DataColumn columnLanguages;
            
            private global::System.Data.DataColumn columnDateAdded;
            
            private global::System.Data.DataColumn columnSubtitles;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnDisks;
            
            private global::System.Data.DataColumn columnLength_Num;
            
            private global::System.Data.DataColumn columnPicture;
            
            private global::System.Data.DataColumn columnCertification;
            
            private global::System.Data.DataColumn columnWriter;
            
            private global::System.Data.DataColumn columnWatched;
            
            private global::System.Data.DataColumn columnDateWatched;
            
            private global::System.Data.DataColumn columnIMDB_Id;
            
            private global::System.Data.DataColumn columnTMDB_Id;
            
            private global::System.Data.DataColumn columnContents_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieDataTable(bool initExpressions) {
                this.TableName = "Movie";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MovieDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MovieDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckedColumn {
                get {
                    return this.columnChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MediaLabelColumn {
                get {
                    return this.columnMediaLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MediaTypeColumn {
                get {
                    return this.columnMediaType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BorrowerColumn {
                get {
                    return this.columnBorrower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatingColumn {
                get {
                    return this.columnRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalTitleColumn {
                get {
                    return this.columnOriginalTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TranslatedTitleColumn {
                get {
                    return this.columnTranslatedTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormattedTitleColumn {
                get {
                    return this.columnFormattedTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DirectorColumn {
                get {
                    return this.columnDirector;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProducerColumn {
                get {
                    return this.columnProducer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActorsColumn {
                get {
                    return this.columnActors;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn URLColumn {
                get {
                    return this.columnURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoFormatColumn {
                get {
                    return this.columnVideoFormat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoBitrateColumn {
                get {
                    return this.columnVideoBitrate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AudioFormatColumn {
                get {
                    return this.columnAudioFormat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AudioBitrateColumn {
                get {
                    return this.columnAudioBitrate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResolutionColumn {
                get {
                    return this.columnResolution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FramerateColumn {
                get {
                    return this.columnFramerate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LanguagesColumn {
                get {
                    return this.columnLanguages;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateAddedColumn {
                get {
                    return this.columnDateAdded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubtitlesColumn {
                get {
                    return this.columnSubtitles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisksColumn {
                get {
                    return this.columnDisks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Length_NumColumn {
                get {
                    return this.columnLength_Num;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureColumn {
                get {
                    return this.columnPicture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CertificationColumn {
                get {
                    return this.columnCertification;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WriterColumn {
                get {
                    return this.columnWriter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WatchedColumn {
                get {
                    return this.columnWatched;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateWatchedColumn {
                get {
                    return this.columnDateWatched;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IMDB_IdColumn {
                get {
                    return this.columnIMDB_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TMDB_IdColumn {
                get {
                    return this.columnTMDB_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Contents_IdColumn {
                get {
                    return this.columnContents_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRow this[int index] {
                get {
                    return ((MovieRow)(this.Rows[index]));
                }
            }
            
            public event MovieRowChangeEventHandler MovieRowChanging;
            
            public event MovieRowChangeEventHandler MovieRowChanged;
            
            public event MovieRowChangeEventHandler MovieRowDeleting;
            
            public event MovieRowChangeEventHandler MovieRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMovieRow(MovieRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRow AddMovieRow(
                        int Number, 
                        string Checked, 
                        string MediaLabel, 
                        string MediaType, 
                        string Source, 
                        string Date, 
                        string Borrower, 
                        decimal Rating, 
                        string OriginalTitle, 
                        string TranslatedTitle, 
                        string FormattedTitle, 
                        string Director, 
                        string Producer, 
                        string Country, 
                        string Category, 
                        string Year, 
                        string Length, 
                        string Actors, 
                        string URL, 
                        string Description, 
                        string Comments, 
                        string VideoFormat, 
                        string VideoBitrate, 
                        string AudioFormat, 
                        string AudioBitrate, 
                        string Resolution, 
                        string Framerate, 
                        string Languages, 
                        System.DateTime DateAdded, 
                        string Subtitles, 
                        string Size, 
                        string Disks, 
                        int Length_Num, 
                        string Picture, 
                        string Certification, 
                        string Writer, 
                        string Watched, 
                        System.DateTime DateWatched, 
                        string IMDB_Id, 
                        string TMDB_Id) {
                MovieRow rowMovieRow = ((MovieRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Number,
                        Checked,
                        MediaLabel,
                        MediaType,
                        Source,
                        Date,
                        Borrower,
                        Rating,
                        OriginalTitle,
                        TranslatedTitle,
                        FormattedTitle,
                        Director,
                        Producer,
                        Country,
                        Category,
                        Year,
                        Length,
                        Actors,
                        URL,
                        Description,
                        Comments,
                        VideoFormat,
                        VideoBitrate,
                        AudioFormat,
                        AudioBitrate,
                        Resolution,
                        Framerate,
                        Languages,
                        DateAdded,
                        Subtitles,
                        Size,
                        Disks,
                        Length_Num,
                        Picture,
                        Certification,
                        Writer,
                        Watched,
                        DateWatched,
                        IMDB_Id,
                        TMDB_Id,
                        null};
                rowMovieRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMovieRow);
                return rowMovieRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRow AddMovieRow(
                        int Number, 
                        string Checked, 
                        string MediaLabel, 
                        string MediaType, 
                        string Source, 
                        string Date, 
                        string Borrower, 
                        decimal Rating, 
                        string OriginalTitle, 
                        string TranslatedTitle, 
                        string FormattedTitle, 
                        string Director, 
                        string Producer, 
                        string Country, 
                        string Category, 
                        string Year, 
                        string Length, 
                        string Actors, 
                        string URL, 
                        string Description, 
                        string Comments, 
                        string VideoFormat, 
                        string VideoBitrate, 
                        string AudioFormat, 
                        string AudioBitrate, 
                        string Resolution, 
                        string Framerate, 
                        string Languages, 
                        string Subtitles, 
                        string Size, 
                        string Disks, 
                        string Picture, 
                        string Certification, 
                        string Writer, 
                        string Watched, 
                        System.DateTime DateWatched, 
                        string IMDB_Id, 
                        string TMDB_Id) {
                MovieRow rowMovieRow = ((MovieRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Number,
                        Checked,
                        MediaLabel,
                        MediaType,
                        Source,
                        Date,
                        Borrower,
                        Rating,
                        OriginalTitle,
                        TranslatedTitle,
                        FormattedTitle,
                        Director,
                        Producer,
                        Country,
                        Category,
                        Year,
                        Length,
                        Actors,
                        URL,
                        Description,
                        Comments,
                        VideoFormat,
                        VideoBitrate,
                        AudioFormat,
                        AudioBitrate,
                        Resolution,
                        Framerate,
                        Languages,
                        null,
                        Subtitles,
                        Size,
                        Disks,
                        null,
                        Picture,
                        Certification,
                        Writer,
                        Watched,
                        DateWatched,
                        IMDB_Id,
                        TMDB_Id,
                        null};
                rowMovieRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMovieRow);
                return rowMovieRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MovieDataTable cln = ((MovieDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MovieDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumber = base.Columns["Number"];
                this.columnChecked = base.Columns["Checked"];
                this.columnMediaLabel = base.Columns["MediaLabel"];
                this.columnMediaType = base.Columns["MediaType"];
                this.columnSource = base.Columns["Source"];
                this.columnDate = base.Columns["Date"];
                this.columnBorrower = base.Columns["Borrower"];
                this.columnRating = base.Columns["Rating"];
                this.columnOriginalTitle = base.Columns["OriginalTitle"];
                this.columnTranslatedTitle = base.Columns["TranslatedTitle"];
                this.columnFormattedTitle = base.Columns["FormattedTitle"];
                this.columnDirector = base.Columns["Director"];
                this.columnProducer = base.Columns["Producer"];
                this.columnCountry = base.Columns["Country"];
                this.columnCategory = base.Columns["Category"];
                this.columnYear = base.Columns["Year"];
                this.columnLength = base.Columns["Length"];
                this.columnActors = base.Columns["Actors"];
                this.columnURL = base.Columns["URL"];
                this.columnDescription = base.Columns["Description"];
                this.columnComments = base.Columns["Comments"];
                this.columnVideoFormat = base.Columns["VideoFormat"];
                this.columnVideoBitrate = base.Columns["VideoBitrate"];
                this.columnAudioFormat = base.Columns["AudioFormat"];
                this.columnAudioBitrate = base.Columns["AudioBitrate"];
                this.columnResolution = base.Columns["Resolution"];
                this.columnFramerate = base.Columns["Framerate"];
                this.columnLanguages = base.Columns["Languages"];
                this.columnDateAdded = base.Columns["DateAdded"];
                this.columnSubtitles = base.Columns["Subtitles"];
                this.columnSize = base.Columns["Size"];
                this.columnDisks = base.Columns["Disks"];
                this.columnLength_Num = base.Columns["Length_Num"];
                this.columnPicture = base.Columns["Picture"];
                this.columnCertification = base.Columns["Certification"];
                this.columnWriter = base.Columns["Writer"];
                this.columnWatched = base.Columns["Watched"];
                this.columnDateWatched = base.Columns["DateWatched"];
                this.columnIMDB_Id = base.Columns["IMDB_Id"];
                this.columnTMDB_Id = base.Columns["TMDB_Id"];
                this.columnContents_Id = base.Columns["Contents_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumber);
                this.columnChecked = new global::System.Data.DataColumn("Checked", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnChecked);
                this.columnMediaLabel = new global::System.Data.DataColumn("MediaLabel", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMediaLabel);
                this.columnMediaType = new global::System.Data.DataColumn("MediaType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMediaType);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSource);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDate);
                this.columnBorrower = new global::System.Data.DataColumn("Borrower", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBorrower);
                this.columnRating = new global::System.Data.DataColumn("Rating", typeof(decimal), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRating);
                this.columnOriginalTitle = new global::System.Data.DataColumn("OriginalTitle", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOriginalTitle);
                this.columnTranslatedTitle = new global::System.Data.DataColumn("TranslatedTitle", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTranslatedTitle);
                this.columnFormattedTitle = new global::System.Data.DataColumn("FormattedTitle", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFormattedTitle);
                this.columnDirector = new global::System.Data.DataColumn("Director", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDirector);
                this.columnProducer = new global::System.Data.DataColumn("Producer", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnProducer);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCountry);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCategory);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnYear);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLength);
                this.columnActors = new global::System.Data.DataColumn("Actors", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActors);
                this.columnURL = new global::System.Data.DataColumn("URL", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnURL);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDescription);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnComments);
                this.columnVideoFormat = new global::System.Data.DataColumn("VideoFormat", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVideoFormat);
                this.columnVideoBitrate = new global::System.Data.DataColumn("VideoBitrate", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVideoBitrate);
                this.columnAudioFormat = new global::System.Data.DataColumn("AudioFormat", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAudioFormat);
                this.columnAudioBitrate = new global::System.Data.DataColumn("AudioBitrate", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAudioBitrate);
                this.columnResolution = new global::System.Data.DataColumn("Resolution", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnResolution);
                this.columnFramerate = new global::System.Data.DataColumn("Framerate", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFramerate);
                this.columnLanguages = new global::System.Data.DataColumn("Languages", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLanguages);
                this.columnDateAdded = new global::System.Data.DataColumn("DateAdded", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateAdded);
                this.columnSubtitles = new global::System.Data.DataColumn("Subtitles", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSubtitles);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSize);
                this.columnDisks = new global::System.Data.DataColumn("Disks", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisks);
                this.columnLength_Num = new global::System.Data.DataColumn("Length_Num", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength_Num);
                this.columnPicture = new global::System.Data.DataColumn("Picture", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPicture);
                this.columnCertification = new global::System.Data.DataColumn("Certification", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCertification);
                this.columnWriter = new global::System.Data.DataColumn("Writer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWriter);
                this.columnWatched = new global::System.Data.DataColumn("Watched", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWatched);
                this.columnDateWatched = new global::System.Data.DataColumn("DateWatched", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateWatched);
                this.columnIMDB_Id = new global::System.Data.DataColumn("IMDB_Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIMDB_Id);
                this.columnTMDB_Id = new global::System.Data.DataColumn("TMDB_Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTMDB_Id);
                this.columnContents_Id = new global::System.Data.DataColumn("Contents_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnContents_Id);
                this.columnNumber.Namespace = "";
                this.columnChecked.Namespace = "";
                this.columnMediaLabel.Namespace = "";
                this.columnMediaType.Namespace = "";
                this.columnSource.Namespace = "";
                this.columnDate.Namespace = "";
                this.columnBorrower.Namespace = "";
                this.columnRating.Namespace = "";
                this.columnOriginalTitle.Namespace = "";
                this.columnTranslatedTitle.Namespace = "";
                this.columnFormattedTitle.Namespace = "";
                this.columnDirector.Namespace = "";
                this.columnProducer.Namespace = "";
                this.columnCountry.Namespace = "";
                this.columnCategory.Namespace = "";
                this.columnYear.Namespace = "";
                this.columnLength.Namespace = "";
                this.columnActors.Namespace = "";
                this.columnURL.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnComments.Namespace = "";
                this.columnVideoFormat.Namespace = "";
                this.columnVideoBitrate.Namespace = "";
                this.columnAudioFormat.Namespace = "";
                this.columnAudioBitrate.Namespace = "";
                this.columnResolution.Namespace = "";
                this.columnFramerate.Namespace = "";
                this.columnLanguages.Namespace = "";
                this.columnDateAdded.ReadOnly = true;
                this.columnSubtitles.Namespace = "";
                this.columnSize.Namespace = "";
                this.columnDisks.Namespace = "";
                this.columnLength_Num.ReadOnly = true;
                this.columnLength_Num.DefaultValue = ((int)(0));
                this.columnPicture.Namespace = "";
                this.columnContents_Id.AutoIncrement = true;
                this.columnContents_Id.AllowDBNull = false;
                this.columnContents_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRow NewMovieRow() {
                return ((MovieRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MovieRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MovieRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.DateAddedColumn.Expression = "Convert(Date,\'System.DateTime\')";
                this.Length_NumColumn.Expression = "Convert(Length,\'System.Int32\')";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MovieRowChanged != null)) {
                    this.MovieRowChanged(this, new MovieRowChangeEvent(((MovieRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MovieRowChanging != null)) {
                    this.MovieRowChanging(this, new MovieRowChangeEvent(((MovieRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MovieRowDeleted != null)) {
                    this.MovieRowDeleted(this, new MovieRowChangeEvent(((MovieRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MovieRowDeleting != null)) {
                    this.MovieRowDeleting(this, new MovieRowChangeEvent(((MovieRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMovieRow(MovieRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AntMovieCatalog ds = new AntMovieCatalog();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MovieDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CatalogRow : global::System.Data.DataRow {
            
            private CatalogDataTable tableCatalog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CatalogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCatalog = ((CatalogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AntMovieCatalog_Id {
                get {
                    try {
                        return ((int)(this[this.tableCatalog.AntMovieCatalog_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte AntMovieCatalog_Id in Tabelle Catalog ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatalog.AntMovieCatalog_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Properties {
                get {
                    try {
                        return ((string)(this[this.tableCatalog.PropertiesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Properties in Tabelle Catalog ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCatalog.PropertiesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Catalog_Id {
                get {
                    return ((int)(this[this.tableCatalog.Catalog_IdColumn]));
                }
                set {
                    this[this.tableCatalog.Catalog_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAntMovieCatalog_IdNull() {
                return this.IsNull(this.tableCatalog.AntMovieCatalog_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAntMovieCatalog_IdNull() {
                this[this.tableCatalog.AntMovieCatalog_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropertiesNull() {
                return this.IsNull(this.tableCatalog.PropertiesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropertiesNull() {
                this[this.tableCatalog.PropertiesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRow[] GetContentsRows() {
                if ((this.Table.ChildRelations["Catalog_Contents"] == null)) {
                    return new ContentsRow[0];
                }
                else {
                    return ((ContentsRow[])(base.GetChildRows(this.Table.ChildRelations["Catalog_Contents"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ContentsRow : global::System.Data.DataRow {
            
            private ContentsDataTable tableContents;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableContents = ((ContentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Contents_Id {
                get {
                    return ((int)(this[this.tableContents.Contents_IdColumn]));
                }
                set {
                    this[this.tableContents.Contents_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Catalog_Id {
                get {
                    try {
                        return ((int)(this[this.tableContents.Catalog_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Catalog_Id in Tabelle Contents ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableContents.Catalog_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRow CatalogRow {
                get {
                    return ((CatalogRow)(this.GetParentRow(this.Table.ParentRelations["Catalog_Contents"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Catalog_Contents"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCatalog_IdNull() {
                return this.IsNull(this.tableContents.Catalog_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCatalog_IdNull() {
                this[this.tableContents.Catalog_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRow[] GetMovieRows() {
                if ((this.Table.ChildRelations["Contents_Movie"] == null)) {
                    return new MovieRow[0];
                }
                else {
                    return ((MovieRow[])(base.GetChildRows(this.Table.ChildRelations["Contents_Movie"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MovieRow : global::System.Data.DataRow {
            
            private MovieDataTable tableMovie;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MovieRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMovie = ((MovieDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Number {
                get {
                    try {
                        return ((int)(this[this.tableMovie.NumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Number in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Checked {
                get {
                    try {
                        return ((string)(this[this.tableMovie.CheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Checked in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.CheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MediaLabel {
                get {
                    try {
                        return ((string)(this[this.tableMovie.MediaLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MediaLabel in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.MediaLabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MediaType {
                get {
                    try {
                        return ((string)(this[this.tableMovie.MediaTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MediaType in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.MediaTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableMovie.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Source in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Date {
                get {
                    try {
                        return ((string)(this[this.tableMovie.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Date in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Borrower {
                get {
                    try {
                        return ((string)(this[this.tableMovie.BorrowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Borrower in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.BorrowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rating {
                get {
                    try {
                        return ((decimal)(this[this.tableMovie.RatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Rating in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.RatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OriginalTitle {
                get {
                    try {
                        return ((string)(this[this.tableMovie.OriginalTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte OriginalTitle in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.OriginalTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TranslatedTitle {
                get {
                    try {
                        return ((string)(this[this.tableMovie.TranslatedTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TranslatedTitle in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.TranslatedTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormattedTitle {
                get {
                    try {
                        return ((string)(this[this.tableMovie.FormattedTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte FormattedTitle in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.FormattedTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Director {
                get {
                    try {
                        return ((string)(this[this.tableMovie.DirectorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Director in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.DirectorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Producer {
                get {
                    try {
                        return ((string)(this[this.tableMovie.ProducerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Producer in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.ProducerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableMovie.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Country in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableMovie.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Category in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Year {
                get {
                    try {
                        return ((string)(this[this.tableMovie.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Year in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Length {
                get {
                    try {
                        return ((string)(this[this.tableMovie.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Length in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Actors {
                get {
                    try {
                        return ((string)(this[this.tableMovie.ActorsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Actors in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.ActorsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string URL {
                get {
                    try {
                        return ((string)(this[this.tableMovie.URLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte URL in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.URLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableMovie.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Description in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableMovie.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Comments in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoFormat {
                get {
                    try {
                        return ((string)(this[this.tableMovie.VideoFormatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte VideoFormat in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.VideoFormatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoBitrate {
                get {
                    try {
                        return ((string)(this[this.tableMovie.VideoBitrateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte VideoBitrate in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.VideoBitrateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AudioFormat {
                get {
                    try {
                        return ((string)(this[this.tableMovie.AudioFormatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte AudioFormat in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.AudioFormatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AudioBitrate {
                get {
                    try {
                        return ((string)(this[this.tableMovie.AudioBitrateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte AudioBitrate in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.AudioBitrateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Resolution {
                get {
                    try {
                        return ((string)(this[this.tableMovie.ResolutionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Resolution in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.ResolutionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Framerate {
                get {
                    try {
                        return ((string)(this[this.tableMovie.FramerateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Framerate in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.FramerateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Languages {
                get {
                    try {
                        return ((string)(this[this.tableMovie.LanguagesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Languages in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.LanguagesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateAdded {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMovie.DateAddedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DateAdded in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.DateAddedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subtitles {
                get {
                    try {
                        return ((string)(this[this.tableMovie.SubtitlesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Subtitles in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.SubtitlesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tableMovie.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Size in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Disks {
                get {
                    try {
                        return ((string)(this[this.tableMovie.DisksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Disks in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.DisksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Length_Num {
                get {
                    try {
                        return ((int)(this[this.tableMovie.Length_NumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Length_Num in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.Length_NumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Picture {
                get {
                    try {
                        return ((string)(this[this.tableMovie.PictureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Picture in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.PictureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Certification {
                get {
                    try {
                        return ((string)(this[this.tableMovie.CertificationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Certification in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.CertificationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Writer {
                get {
                    try {
                        return ((string)(this[this.tableMovie.WriterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Writer in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.WriterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Watched {
                get {
                    try {
                        return ((string)(this[this.tableMovie.WatchedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Watched in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.WatchedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateWatched {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMovie.DateWatchedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DateWatched in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.DateWatchedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IMDB_Id {
                get {
                    try {
                        return ((string)(this[this.tableMovie.IMDB_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte IMDB_Id in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.IMDB_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TMDB_Id {
                get {
                    try {
                        return ((string)(this[this.tableMovie.TMDB_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TMDB_Id in Tabelle Movie ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableMovie.TMDB_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Contents_Id {
                get {
                    return ((int)(this[this.tableMovie.Contents_IdColumn]));
                }
                set {
                    this[this.tableMovie.Contents_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRow ContentsRow {
                get {
                    return ((ContentsRow)(this.GetParentRow(this.Table.ParentRelations["Contents_Movie"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Contents_Movie"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableMovie.NumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableMovie.NumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckedNull() {
                return this.IsNull(this.tableMovie.CheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckedNull() {
                this[this.tableMovie.CheckedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaLabelNull() {
                return this.IsNull(this.tableMovie.MediaLabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaLabelNull() {
                this[this.tableMovie.MediaLabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaTypeNull() {
                return this.IsNull(this.tableMovie.MediaTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaTypeNull() {
                this[this.tableMovie.MediaTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tableMovie.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tableMovie.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableMovie.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableMovie.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBorrowerNull() {
                return this.IsNull(this.tableMovie.BorrowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBorrowerNull() {
                this[this.tableMovie.BorrowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatingNull() {
                return this.IsNull(this.tableMovie.RatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatingNull() {
                this[this.tableMovie.RatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalTitleNull() {
                return this.IsNull(this.tableMovie.OriginalTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalTitleNull() {
                this[this.tableMovie.OriginalTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTranslatedTitleNull() {
                return this.IsNull(this.tableMovie.TranslatedTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTranslatedTitleNull() {
                this[this.tableMovie.TranslatedTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormattedTitleNull() {
                return this.IsNull(this.tableMovie.FormattedTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormattedTitleNull() {
                this[this.tableMovie.FormattedTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDirectorNull() {
                return this.IsNull(this.tableMovie.DirectorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDirectorNull() {
                this[this.tableMovie.DirectorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProducerNull() {
                return this.IsNull(this.tableMovie.ProducerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProducerNull() {
                this[this.tableMovie.ProducerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tableMovie.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tableMovie.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableMovie.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableMovie.CategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableMovie.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableMovie.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableMovie.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableMovie.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActorsNull() {
                return this.IsNull(this.tableMovie.ActorsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActorsNull() {
                this[this.tableMovie.ActorsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsURLNull() {
                return this.IsNull(this.tableMovie.URLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetURLNull() {
                this[this.tableMovie.URLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableMovie.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableMovie.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableMovie.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableMovie.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoFormatNull() {
                return this.IsNull(this.tableMovie.VideoFormatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoFormatNull() {
                this[this.tableMovie.VideoFormatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoBitrateNull() {
                return this.IsNull(this.tableMovie.VideoBitrateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoBitrateNull() {
                this[this.tableMovie.VideoBitrateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAudioFormatNull() {
                return this.IsNull(this.tableMovie.AudioFormatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAudioFormatNull() {
                this[this.tableMovie.AudioFormatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAudioBitrateNull() {
                return this.IsNull(this.tableMovie.AudioBitrateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAudioBitrateNull() {
                this[this.tableMovie.AudioBitrateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResolutionNull() {
                return this.IsNull(this.tableMovie.ResolutionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResolutionNull() {
                this[this.tableMovie.ResolutionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFramerateNull() {
                return this.IsNull(this.tableMovie.FramerateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFramerateNull() {
                this[this.tableMovie.FramerateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLanguagesNull() {
                return this.IsNull(this.tableMovie.LanguagesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLanguagesNull() {
                this[this.tableMovie.LanguagesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateAddedNull() {
                return this.IsNull(this.tableMovie.DateAddedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateAddedNull() {
                this[this.tableMovie.DateAddedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubtitlesNull() {
                return this.IsNull(this.tableMovie.SubtitlesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubtitlesNull() {
                this[this.tableMovie.SubtitlesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableMovie.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableMovie.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisksNull() {
                return this.IsNull(this.tableMovie.DisksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisksNull() {
                this[this.tableMovie.DisksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLength_NumNull() {
                return this.IsNull(this.tableMovie.Length_NumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLength_NumNull() {
                this[this.tableMovie.Length_NumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPictureNull() {
                return this.IsNull(this.tableMovie.PictureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPictureNull() {
                this[this.tableMovie.PictureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCertificationNull() {
                return this.IsNull(this.tableMovie.CertificationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCertificationNull() {
                this[this.tableMovie.CertificationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWriterNull() {
                return this.IsNull(this.tableMovie.WriterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWriterNull() {
                this[this.tableMovie.WriterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWatchedNull() {
                return this.IsNull(this.tableMovie.WatchedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWatchedNull() {
                this[this.tableMovie.WatchedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateWatchedNull() {
                return this.IsNull(this.tableMovie.DateWatchedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateWatchedNull() {
                this[this.tableMovie.DateWatchedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIMDB_IdNull() {
                return this.IsNull(this.tableMovie.IMDB_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIMDB_IdNull() {
                this[this.tableMovie.IMDB_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTMDB_IdNull() {
                return this.IsNull(this.tableMovie.TMDB_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTMDB_IdNull() {
                this[this.tableMovie.TMDB_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CatalogRowChangeEvent : global::System.EventArgs {
            
            private CatalogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRowChangeEvent(CatalogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CatalogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ContentsRowChangeEvent : global::System.EventArgs {
            
            private ContentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRowChangeEvent(ContentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MovieRowChangeEvent : global::System.EventArgs {
            
            private MovieRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRowChangeEvent(MovieRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MovieRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
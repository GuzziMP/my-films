//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.3625
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MyFilmsPlugin.DataBase {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MFview")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MFview : global::System.Data.DataSet {
        
        private ViewDataTable tableView;
        
        private ViewsDataTable tableViews;
        
        private global::System.Data.DataRelation relationFK_View_Views;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MFview() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MFview(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["View"] != null)) {
                    base.Tables.Add(new ViewDataTable(ds.Tables["View"]));
                }
                if ((ds.Tables["Views"] != null)) {
                    base.Tables.Add(new ViewsDataTable(ds.Tables["Views"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewDataTable View {
            get {
                return this.tableView;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewsDataTable Views {
            get {
                return this.tableViews;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MFview cln = ((MFview)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["View"] != null)) {
                    base.Tables.Add(new ViewDataTable(ds.Tables["View"]));
                }
                if ((ds.Tables["Views"] != null)) {
                    base.Tables.Add(new ViewsDataTable(ds.Tables["Views"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableView = ((ViewDataTable)(base.Tables["View"]));
            if ((initTable == true)) {
                if ((this.tableView != null)) {
                    this.tableView.InitVars();
                }
            }
            this.tableViews = ((ViewsDataTable)(base.Tables["Views"]));
            if ((initTable == true)) {
                if ((this.tableViews != null)) {
                    this.tableViews.InitVars();
                }
            }
            this.relationFK_View_Views = this.Relations["FK_View_Views"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MFview";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MFview.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableView = new ViewDataTable();
            base.Tables.Add(this.tableView);
            this.tableViews = new ViewsDataTable();
            base.Tables.Add(this.tableViews);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_View_Views", new global::System.Data.DataColumn[] {
                        this.tableView.View_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableViews.View_IdColumn});
            this.tableViews.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_View_Views = new global::System.Data.DataRelation("FK_View_Views", new global::System.Data.DataColumn[] {
                        this.tableView.View_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableViews.View_IdColumn}, false);
            this.relationFK_View_Views.Nested = true;
            this.Relations.Add(this.relationFK_View_Views);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViews() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MFview ds = new MFview();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ViewRowChangeEventHandler(object sender, ViewRowChangeEvent e);
        
        public delegate void ViewsRowChangeEventHandler(object sender, ViewsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewDataTable : global::System.Data.TypedTableBase<ViewRow> {
            
            private global::System.Data.DataColumn columnView_Id;
            
            private global::System.Data.DataColumn columnLabel;
            
            private global::System.Data.DataColumn columnDBfield;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnFilter;
            
            private global::System.Data.DataColumn columnIndex;
            
            private global::System.Data.DataColumn columnShowEmpty;
            
            private global::System.Data.DataColumn columnReverseNames;
            
            private global::System.Data.DataColumn columnSortOcurrencies;
            
            private global::System.Data.DataColumn columnSortDirectionView;
            
            private global::System.Data.DataColumn columnLayoutView;
            
            private global::System.Data.DataColumn columnSortFieldHierarchy;
            
            private global::System.Data.DataColumn columnSortDirectionHierarchy;
            
            private global::System.Data.DataColumn columnLayoutHierarchy;
            
            private global::System.Data.DataColumn columnSortFieldFilms;
            
            private global::System.Data.DataColumn columnSortDirectionFilms;
            
            private global::System.Data.DataColumn columnLayoutFilms;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewDataTable() {
                this.TableName = "View";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn View_IdColumn {
                get {
                    return this.columnView_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelColumn {
                get {
                    return this.columnLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DBfieldColumn {
                get {
                    return this.columnDBfield;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilterColumn {
                get {
                    return this.columnFilter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndexColumn {
                get {
                    return this.columnIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShowEmptyColumn {
                get {
                    return this.columnShowEmpty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReverseNamesColumn {
                get {
                    return this.columnReverseNames;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortOcurrenciesColumn {
                get {
                    return this.columnSortOcurrencies;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortDirectionViewColumn {
                get {
                    return this.columnSortDirectionView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayoutViewColumn {
                get {
                    return this.columnLayoutView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortFieldHierarchyColumn {
                get {
                    return this.columnSortFieldHierarchy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortDirectionHierarchyColumn {
                get {
                    return this.columnSortDirectionHierarchy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayoutHierarchyColumn {
                get {
                    return this.columnLayoutHierarchy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortFieldFilmsColumn {
                get {
                    return this.columnSortFieldFilms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortDirectionFilmsColumn {
                get {
                    return this.columnSortDirectionFilms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayoutFilmsColumn {
                get {
                    return this.columnLayoutFilms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRow this[int index] {
                get {
                    return ((ViewRow)(this.Rows[index]));
                }
            }
            
            public event ViewRowChangeEventHandler ViewRowChanging;
            
            public event ViewRowChangeEventHandler ViewRowChanged;
            
            public event ViewRowChangeEventHandler ViewRowDeleting;
            
            public event ViewRowChangeEventHandler ViewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewRow(ViewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRow AddViewRow(
                        string View_Id, 
                        string Label, 
                        string DBfield, 
                        string Value, 
                        string Filter, 
                        int Index, 
                        bool ShowEmpty, 
                        bool ReverseNames, 
                        bool SortOcurrencies, 
                        string SortDirectionView, 
                        string LayoutView, 
                        string SortFieldHierarchy, 
                        string SortDirectionHierarchy, 
                        string LayoutHierarchy, 
                        string SortFieldFilms, 
                        string SortDirectionFilms, 
                        string LayoutFilms) {
                ViewRow rowViewRow = ((ViewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        View_Id,
                        Label,
                        DBfield,
                        Value,
                        Filter,
                        Index,
                        ShowEmpty,
                        ReverseNames,
                        SortOcurrencies,
                        SortDirectionView,
                        LayoutView,
                        SortFieldHierarchy,
                        SortDirectionHierarchy,
                        LayoutHierarchy,
                        SortFieldFilms,
                        SortDirectionFilms,
                        LayoutFilms};
                rowViewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowViewRow);
                return rowViewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRow FindByView_Id(string View_Id) {
                return ((ViewRow)(this.Rows.Find(new object[] {
                            View_Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ViewDataTable cln = ((ViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ViewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnView_Id = base.Columns["View_Id"];
                this.columnLabel = base.Columns["Label"];
                this.columnDBfield = base.Columns["DBfield"];
                this.columnValue = base.Columns["Value"];
                this.columnFilter = base.Columns["Filter"];
                this.columnIndex = base.Columns["Index"];
                this.columnShowEmpty = base.Columns["ShowEmpty"];
                this.columnReverseNames = base.Columns["ReverseNames"];
                this.columnSortOcurrencies = base.Columns["SortOcurrencies"];
                this.columnSortDirectionView = base.Columns["SortDirectionView"];
                this.columnLayoutView = base.Columns["LayoutView"];
                this.columnSortFieldHierarchy = base.Columns["SortFieldHierarchy"];
                this.columnSortDirectionHierarchy = base.Columns["SortDirectionHierarchy"];
                this.columnLayoutHierarchy = base.Columns["LayoutHierarchy"];
                this.columnSortFieldFilms = base.Columns["SortFieldFilms"];
                this.columnSortDirectionFilms = base.Columns["SortDirectionFilms"];
                this.columnLayoutFilms = base.Columns["LayoutFilms"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnView_Id = new global::System.Data.DataColumn("View_Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnView_Id);
                this.columnLabel = new global::System.Data.DataColumn("Label", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabel);
                this.columnDBfield = new global::System.Data.DataColumn("DBfield", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBfield);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnFilter = new global::System.Data.DataColumn("Filter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilter);
                this.columnIndex = new global::System.Data.DataColumn("Index", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex);
                this.columnShowEmpty = new global::System.Data.DataColumn("ShowEmpty", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowEmpty);
                this.columnReverseNames = new global::System.Data.DataColumn("ReverseNames", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReverseNames);
                this.columnSortOcurrencies = new global::System.Data.DataColumn("SortOcurrencies", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortOcurrencies);
                this.columnSortDirectionView = new global::System.Data.DataColumn("SortDirectionView", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortDirectionView);
                this.columnLayoutView = new global::System.Data.DataColumn("LayoutView", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayoutView);
                this.columnSortFieldHierarchy = new global::System.Data.DataColumn("SortFieldHierarchy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortFieldHierarchy);
                this.columnSortDirectionHierarchy = new global::System.Data.DataColumn("SortDirectionHierarchy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortDirectionHierarchy);
                this.columnLayoutHierarchy = new global::System.Data.DataColumn("LayoutHierarchy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayoutHierarchy);
                this.columnSortFieldFilms = new global::System.Data.DataColumn("SortFieldFilms", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortFieldFilms);
                this.columnSortDirectionFilms = new global::System.Data.DataColumn("SortDirectionFilms", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortDirectionFilms);
                this.columnLayoutFilms = new global::System.Data.DataColumn("LayoutFilms", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayoutFilms);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ViewKey", new global::System.Data.DataColumn[] {
                                this.columnView_Id}, true));
                this.columnView_Id.AllowDBNull = false;
                this.columnView_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRow NewViewRow() {
                return ((ViewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ViewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ViewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewRowChanged != null)) {
                    this.ViewRowChanged(this, new ViewRowChangeEvent(((ViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewRowChanging != null)) {
                    this.ViewRowChanging(this, new ViewRowChangeEvent(((ViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewRowDeleted != null)) {
                    this.ViewRowDeleted(this, new ViewRowChangeEvent(((ViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewRowDeleting != null)) {
                    this.ViewRowDeleting(this, new ViewRowChangeEvent(((ViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewRow(ViewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFview ds = new MFview();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewsDataTable : global::System.Data.TypedTableBase<ViewsRow> {
            
            private global::System.Data.DataColumn columnViewName;
            
            private global::System.Data.DataColumn columnView_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewsDataTable() {
                this.TableName = "Views";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ViewNameColumn {
                get {
                    return this.columnViewName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn View_IdColumn {
                get {
                    return this.columnView_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewsRow this[int index] {
                get {
                    return ((ViewsRow)(this.Rows[index]));
                }
            }
            
            public event ViewsRowChangeEventHandler ViewsRowChanging;
            
            public event ViewsRowChangeEventHandler ViewsRowChanged;
            
            public event ViewsRowChangeEventHandler ViewsRowDeleting;
            
            public event ViewsRowChangeEventHandler ViewsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewsRow(ViewsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewsRow AddViewsRow(string ViewName, ViewRow parentViewRowByFK_View_Views) {
                ViewsRow rowViewsRow = ((ViewsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ViewName,
                        null};
                if ((parentViewRowByFK_View_Views != null)) {
                    columnValuesArray[1] = parentViewRowByFK_View_Views[0];
                }
                rowViewsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowViewsRow);
                return rowViewsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ViewsDataTable cln = ((ViewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ViewsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnViewName = base.Columns["ViewName"];
                this.columnView_Id = base.Columns["View_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnViewName = new global::System.Data.DataColumn("ViewName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnViewName);
                this.columnView_Id = new global::System.Data.DataColumn("View_Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnView_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewsRow NewViewsRow() {
                return ((ViewsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ViewsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ViewsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewsRowChanged != null)) {
                    this.ViewsRowChanged(this, new ViewsRowChangeEvent(((ViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewsRowChanging != null)) {
                    this.ViewsRowChanging(this, new ViewsRowChangeEvent(((ViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewsRowDeleted != null)) {
                    this.ViewsRowDeleted(this, new ViewsRowChangeEvent(((ViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewsRowDeleting != null)) {
                    this.ViewsRowDeleting(this, new ViewsRowChangeEvent(((ViewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewsRow(ViewsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MFview ds = new MFview();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewRow : global::System.Data.DataRow {
            
            private ViewDataTable tableView;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView = ((ViewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string View_Id {
                get {
                    return ((string)(this[this.tableView.View_IdColumn]));
                }
                set {
                    this[this.tableView.View_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Label {
                get {
                    try {
                        return ((string)(this[this.tableView.LabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Label in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.LabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBfield {
                get {
                    try {
                        return ((string)(this[this.tableView.DBfieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DBfield in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.DBfieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableView.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Value in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filter {
                get {
                    try {
                        return ((string)(this[this.tableView.FilterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Filter in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.FilterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Index {
                get {
                    try {
                        return ((int)(this[this.tableView.IndexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Index in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.IndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ShowEmpty {
                get {
                    try {
                        return ((bool)(this[this.tableView.ShowEmptyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ShowEmpty in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.ShowEmptyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ReverseNames {
                get {
                    try {
                        return ((bool)(this[this.tableView.ReverseNamesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ReverseNames in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.ReverseNamesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SortOcurrencies {
                get {
                    try {
                        return ((bool)(this[this.tableView.SortOcurrenciesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SortOcurrencies in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.SortOcurrenciesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SortDirectionView {
                get {
                    try {
                        return ((string)(this[this.tableView.SortDirectionViewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SortDirectionView in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.SortDirectionViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayoutView {
                get {
                    try {
                        return ((string)(this[this.tableView.LayoutViewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LayoutView in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.LayoutViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SortFieldHierarchy {
                get {
                    try {
                        return ((string)(this[this.tableView.SortFieldHierarchyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SortFieldHierarchy in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.SortFieldHierarchyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SortDirectionHierarchy {
                get {
                    try {
                        return ((string)(this[this.tableView.SortDirectionHierarchyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SortDirectionHierarchy in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.SortDirectionHierarchyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayoutHierarchy {
                get {
                    try {
                        return ((string)(this[this.tableView.LayoutHierarchyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LayoutHierarchy in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.LayoutHierarchyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SortFieldFilms {
                get {
                    try {
                        return ((string)(this[this.tableView.SortFieldFilmsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SortFieldFilms in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.SortFieldFilmsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SortDirectionFilms {
                get {
                    try {
                        return ((string)(this[this.tableView.SortDirectionFilmsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SortDirectionFilms in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.SortDirectionFilmsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayoutFilms {
                get {
                    try {
                        return ((string)(this[this.tableView.LayoutFilmsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LayoutFilms in Tabelle View ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableView.LayoutFilmsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabelNull() {
                return this.IsNull(this.tableView.LabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabelNull() {
                this[this.tableView.LabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDBfieldNull() {
                return this.IsNull(this.tableView.DBfieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDBfieldNull() {
                this[this.tableView.DBfieldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableView.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableView.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilterNull() {
                return this.IsNull(this.tableView.FilterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilterNull() {
                this[this.tableView.FilterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndexNull() {
                return this.IsNull(this.tableView.IndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndexNull() {
                this[this.tableView.IndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShowEmptyNull() {
                return this.IsNull(this.tableView.ShowEmptyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShowEmptyNull() {
                this[this.tableView.ShowEmptyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReverseNamesNull() {
                return this.IsNull(this.tableView.ReverseNamesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReverseNamesNull() {
                this[this.tableView.ReverseNamesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortOcurrenciesNull() {
                return this.IsNull(this.tableView.SortOcurrenciesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortOcurrenciesNull() {
                this[this.tableView.SortOcurrenciesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortDirectionViewNull() {
                return this.IsNull(this.tableView.SortDirectionViewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortDirectionViewNull() {
                this[this.tableView.SortDirectionViewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLayoutViewNull() {
                return this.IsNull(this.tableView.LayoutViewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLayoutViewNull() {
                this[this.tableView.LayoutViewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortFieldHierarchyNull() {
                return this.IsNull(this.tableView.SortFieldHierarchyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortFieldHierarchyNull() {
                this[this.tableView.SortFieldHierarchyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortDirectionHierarchyNull() {
                return this.IsNull(this.tableView.SortDirectionHierarchyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortDirectionHierarchyNull() {
                this[this.tableView.SortDirectionHierarchyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLayoutHierarchyNull() {
                return this.IsNull(this.tableView.LayoutHierarchyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLayoutHierarchyNull() {
                this[this.tableView.LayoutHierarchyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortFieldFilmsNull() {
                return this.IsNull(this.tableView.SortFieldFilmsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortFieldFilmsNull() {
                this[this.tableView.SortFieldFilmsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortDirectionFilmsNull() {
                return this.IsNull(this.tableView.SortDirectionFilmsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortDirectionFilmsNull() {
                this[this.tableView.SortDirectionFilmsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLayoutFilmsNull() {
                return this.IsNull(this.tableView.LayoutFilmsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLayoutFilmsNull() {
                this[this.tableView.LayoutFilmsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewsRow[] GetViewsRows() {
                if ((this.Table.ChildRelations["FK_View_Views"] == null)) {
                    return new ViewsRow[0];
                }
                else {
                    return ((ViewsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_View_Views"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewsRow : global::System.Data.DataRow {
            
            private ViewsDataTable tableViews;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViews = ((ViewsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ViewName {
                get {
                    try {
                        return ((string)(this[this.tableViews.ViewNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ViewName in Tabelle Views ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableViews.ViewNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string View_Id {
                get {
                    try {
                        return ((string)(this[this.tableViews.View_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte View_Id in Tabelle Views ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableViews.View_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRow ViewRow {
                get {
                    return ((ViewRow)(this.GetParentRow(this.Table.ParentRelations["FK_View_Views"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_View_Views"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsViewNameNull() {
                return this.IsNull(this.tableViews.ViewNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetViewNameNull() {
                this[this.tableViews.ViewNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsView_IdNull() {
                return this.IsNull(this.tableViews.View_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetView_IdNull() {
                this[this.tableViews.View_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewRowChangeEvent : global::System.EventArgs {
            
            private ViewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRowChangeEvent(ViewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewsRowChangeEvent : global::System.EventArgs {
            
            private ViewsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewsRowChangeEvent(ViewsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
//css_reference "core.dll";
//css_reference "Databases.dll";
//css_reference "utils.dll";

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Net;
using System.Collections;
using System.Web;
using System.Text.RegularExpressions;
using MediaPortal.Util;
using System.Reflection;
using MediaPortal.Configuration;
using MediaPortal.GUI.Library;
using System.Xml;

// change to Grabber, this for avoid to load by mediaportal
class Grabber : MediaPortal.Video.Database.IIMDBScriptGrabber
{
  public Grabber()
    {
    }

  void MediaPortal.Video.Database.IIMDBScriptGrabber.FindFilm(string strSearch, int iLimit, ArrayList elements)
  {
		object pluginObject = LoadDLL();
		ArrayList listConfig = new ArrayList();
				
		if (pluginObject == null)
		{
		  Log.Error("MyVideoGrabber : Unable to load grabber.dll !");
		  return;
		}
		
		listConfig = GetConfigFile();
		if (listConfig.Count == 0 )
		{
			Log.Error("MyVideoGrabber : Unable to get ConfigurationFile. Verify MyVideoGrabber.xml !");
			return;
		}
		      		
		ArrayList listUrl = new ArrayList();
		MethodInfo mtdInfo = null;
		object[] param = new object[3];
		String URL = "";
		String Title = "";
		String DataBase = "";
		Type[] t = {  
                typeof(string),  
                typeof(string),  
                typeof(int)}; 
		
		mtdInfo = pluginObject.GetType().GetMethod("ReturnURL",t);

		param[0] = strSearch;
		param[2] = 1;

		for (int h = 0; h < listConfig.Count; h++)
		{
			param[1] = listConfig[h].ToString();
			Log.Info("MyVideoGrabber : Search : " + strSearch + " with script : " + param[1]);
						
			object o = mtdInfo.Invoke(pluginObject, param);
			listUrl = (ArrayList)o;
			
			IEnumerator enu = listUrl.GetEnumerator();
			for (int i = 0; i < listUrl.Count && i < iLimit; i++)
			{			
				enu.MoveNext();
				object obj = enu.Current;

				Type typeo = obj.GetType();
				
				foreach (PropertyInfo p in typeo.GetProperties())
				{
					if (p.Name == "URL")
						URL = (String)p.GetValue(obj, null);
					if (p.Name == "Title")
						Title = (String)p.GetValue(obj, null);
					if (p.Name == "Database")
						DataBase = (String)p.GetValue(obj, null);
					
				}
				
				MediaPortal.Video.Database.IMDB.IMDBUrl url =
				new MediaPortal.Video.Database.IMDB.IMDBUrl(URL, Title + " ("+h+" - "+DataBase+")", "MyVideoGrabber");
				elements.Add(url);
			}
			
			if (elements.Count > 0)
				break;
		}
  }


  bool MediaPortal.Video.Database.IIMDBScriptGrabber.GetDetails(MediaPortal.Video.Database.IMDB.IMDBUrl url, ref MediaPortal.Video.Database.IMDBMovie movieDetails)
  {
 
	object pluginObject = LoadDLL();
	ArrayList listConfig = new ArrayList();
	
	if (pluginObject == null)
	{
	  Log.Error("MyVideoGrabber : Unable to load grabber.dll !");
	  return false;
	}
	
	listConfig = GetConfigFile();
	if (listConfig.Count == 0 )
	{
		Log.Error("MyVideoGrabber : Unable to get ConfigurationFile. Verify MyVideoGrabber.xml !");
		return false;
	}
    
	string[] datas = new string[20];
	MethodInfo mtdInfo = null;
	object[] param = new object[3];
	
	movieDetails.Database = url.Database;
	mtdInfo = pluginObject.GetType().GetMethod("GetDetail");

	param[0] = url.URL;
	param[1] = "";
	
	for (int i = 0; i < listConfig.Count; i++)
	{
		XmlDocument doc = new XmlDocument();
		doc.Load(listConfig[i].ToString());
		XmlNode n = doc.ChildNodes[1].FirstChild;
		String strTemp = XmlConvert.DecodeName(n.SelectSingleNode("DBName").InnerText);
		if (url.Title.Contains("("+i+" - "+strTemp+")") == true)
		{
			param[2] = listConfig[i].ToString();
			break;
		}
	}
	
	Log.Info("MyVideoGrabber : GetDetail : " + url.Title + " with script : " + param[2]);
	
	object o = mtdInfo.Invoke(pluginObject, param);
	datas = (string[])o;
	
	if (datas.Length == 0)
		return false;
	
	for (int i = 0; i < datas.Length; i++)
	{			
		switch (i)
		{
			case 1 :
				movieDetails.Title = datas[i];
				break;
			case 11 :
				movieDetails.ThumbURL = datas[i];
				break;
			case 3 :
				movieDetails.Plot = datas[i];
				movieDetails.PlotOutline = datas[i];
				break;
			case 4 :
				movieDetails.Votes = datas[i];
				try
         {
         
         		movieDetails.Rating = (float)System.Double.Parse(datas[i].Replace(".",","));
            if (movieDetails.Rating > 10.0f)
              movieDetails.Rating /= 10.0f;
         }
         catch (Exception)
         {
         Log.Info(datas[i]);
         }
				
				break;
			case 5 :
				movieDetails.Cast = datas[i];
				break;
			case 6 :
				movieDetails.Director = datas[i];
				break;
			case 7 :
				movieDetails.WritingCredits = datas[i];
				break;
			case 8 :
				movieDetails.Year = Convert.ToInt32(datas[i]);	
				break;
			case 10 :
				movieDetails.Genre = datas[i];	
				break;
		}	
	}
	
	//check duration with mediainfo.dll
	MediaPortal.Player.MediaInfo mediainfo = new MediaPortal.Player.MediaInfo();
  mediainfo.Open(movieDetails.Path + "\\" + movieDetails.File);
  String duration = mediainfo.Get(MediaPortal.Player.StreamKind.General, 0, "Duration", MediaPortal.Player.InfoKind.Text);
	
	if (duration != null && !duration.Equals("")) {
		int ms = Convert.ToInt32(duration);
	  int minutes=(ms/1000)/60;
		movieDetails.RunTime = minutes;
	}
	
    // found some information 
    return true;
   
  }

  string MediaPortal.Video.Database.IIMDBScriptGrabber.GetName()
  {
    return "MyVideoGrabber";
  }
 
  string MediaPortal.Video.Database.IIMDBScriptGrabber.GetLanguage()
  {
    return "MULTI";
  }
  
  private object LoadDLL()
	{
		object pluginObject = null;
		
		Assembly pluginAssembly = Assembly.LoadFrom("grabber.dll");
		if (pluginAssembly != null)
		{
			Type[] type = pluginAssembly.GetExportedTypes();
			foreach (Type t in type)
			{
				if (t.Name == "Grabber_URLClass")
				{
					pluginObject = Activator.CreateInstance(t);
					break;

				}
			}

		}
		return pluginObject;
	}
  private ArrayList GetConfigFile()
  {
	ArrayList listConfig = new ArrayList();
	
	if (System.IO.File.Exists(Config.GetFolder(Config.Dir.Config) + "\\MyVideoGrabber.xml") == true)
	{
		XmlDocument doc = new XmlDocument();
		doc.Load(Config.GetFolder(Config.Dir.Config) + "\\MyVideoGrabber.xml");
		XmlNode n = doc.ChildNodes[1].FirstChild;
		for (int i = 0; i < n.ChildNodes.Count; i++)
        {
			if (System.IO.File.Exists(n.ChildNodes[i].InnerText) == true)
				listConfig.Add(n.ChildNodes[i].InnerText);
		}
			
		return listConfig;
	}
	else
		return listConfig;
  }
}